(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{1696:function(e){e.exports=JSON.parse('{"name":"terra-application","main":"lib/application-base/ApplicationBase.js","version":"1.10.0","description":"The terra-application package provides a baseline of functionality for applications built with Terra components.","repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"keywords":["Cerner","Terra","Framework","terra-application","Application","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"homepage":"https://github.com/cerner/terra-framework#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","terra-base":"^5.0.0","terra-breakpoints":"^2.0.0","terra-disclosure-manager":"^4.23.0","terra-doc-template":"^2.2.0","terra-modal-manager":"^6.14.0","terra-navigation-prompt":"^1.13.0","terra-slide-panel-manager":"^5.13.0","terra-theme-provider":"^3.14.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest","jest":"jest --config ../../jestconfig.js"}}')},1697:function(e,n,t){"use strict";t.r(n),n.default="# Terra Application\n\nThe `terra-application` package contains the components that comprise Terra's application platform.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-application`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\nThe `terra-application` package can be used by React-based application and library packages to provide a consistent set of features for their applications/components.\n\nAn application and its dependencies must all depend upon the same version of `terra-application`. This requires a level of orchestration between application and library owners, but `terra-application` allows that effort to focus on a single package instead of Terra's entire suite of framework components.\n\nApplication packages must specify `terra-application` as a **dependency**. Library packages must specify `terra-application` as a **peerDependency** (and a **devDependency** to resolve dependencies during development). These guidelines are intended to prevent the duplication of `terra-application` assets in webpack bundles. Bundling multiple versions of `terra-application`, or even multiple instances of the *same* version, will result in undefined and undesired behavior. Under these guidelines, if an application attempts to consume a library package that has a dependency on a different version of `terra-application`, an unmet peer dependency warning will be emitted during npm package installation. While only a warning, this warning indicates a major problem and will result in a non-functional application.\n\n> Note: Packages of the same version may inadvertently be duplicated when using `npm link` or local `file:..` references during development. In these scenarios, an alias can be defined in the webpack configuration to force a single package instance to be used by the application. Alternatively, installing a development package using a `git:` reference should not duplicate the package.\n\n## Features\n\n### ApplicationBase\n\nThe `ApplicationBase` component provides the baseline functionality that an application and its contents require. It renders the following components:\n\n- `<Base />` (from `terra-base`)\n  - The `Base` component provides global style resets and renders an `IntlProvider` component. The `IntlProvider` component exposes its children to translated strings for the declared locale. Please see the documentation for the `terra-base` component for more information.\n- `<ThemeProvider />` (from `terra-theme-provider`)\n  - The `ThemeProvider` component provides themed styles to the components rendered within it.\n- `<ActiveBreakpointProvider />` (from `terra-breakpoints`)\n  - The `ActiveBreakpointProvider` component exposes its children to the breakpoint value attributed to the current viewport size. See the `Breakpoints` section below for more information.\n\nApplications should render `ApplicationBase` at the root of their component tree and around all application contents. Conversely, libraries should not (outside of tests) render an `ApplicationBase` component. Libraries should instead develop their components with the assumption that those components will be rendered within a`ApplicationBase` component by an application.\n\nOnly a single `ApplicationBase` component should be rendered within a given application. All Terra components should be rendered within a `ApplicationBase` component to ensure that they have access to necessary platform features.\n\n```jsx\nimport React, { useContext } from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport { ActiveBreakpointContext } from 'terra-application/lib/breakpoints';\nimport { injectIntl } from 'react-intl';\n\nconst ExampleContent = injectIntl(({ intl }) => {\n  const activeBreakpoint = useContext(ActiveBreakpointContext);\n\n  return (\n    <div>\n      <p>The active breakpoint is {activeBreakpoint}.</p>\n      <p>Translated message: {intl.formatMessage({ id: 'example.string' })}</p>\n    </div>\n  );\n});\n\nconst ExampleApplication = () => (\n  <ApplicationBase\n    locale=\"en-US\"\n    themeName=\"example-theme\"\n  >\n    <ExampleContent />\n  </ApplicationBase>\n)\n```\n\n### I18n\n\nTerra components leverage the [react-intl](https://www.npmjs.com/package/react-intl) project to load and render translated strings. Please see the terra-base and react-intl [documentation](https://github.com/formatjs/react-intl/tree/master/docs) for more information.\n\n> Remember: `ApplicationBase` configures and renders react-intl's `IntlProvider` internally (through `<Base />`). An `IntlProvider` should not be rendered directly.\n\n### Breakpoints\n\n`terra-application` includes components that determine and broadcast an application's responsive breakpoint state.\n\nBreakpoints within Terra are defined as follows:\n\n|Breakpoint Name|Minimum Value|Equivalent Media Query|Description|\n|---|---|---|---|\n|`tiny`|0px|`@media screen and (min-width: 0px)`|Active from viewport width 0px and up |\n|`small`|544px|`@media screen and (min-width: 544px)`|Active from viewport width 544px and up|\n|`medium`|768px|`@media screen and (min-width: 768px)`|Active from viewport width 768px and up|\n|`large`|992px|`@media screen and (min-width: 992px)`|Active from viewport width 992px and up|\n|`huge`|1216px|`@media screen and (min-width: 1216px)`|Active from viewport width 1216 and up|\n|`enormous`|1440px|`@media screen and (min-width: 1440px)`|Active from viewport width 1440px and up|\n\nThe following exports can be imported from the `terra-application/lib/breakpoints` package directory:\n\n#### `breakpoints`\n\nAn Object containing minimum applied value for the named breakpoints.\n\n```jsx\nimport breakpoints from 'terra-application/lib/breakpoints';\n\nconsole.log(breakpoints.tiny);     // Output: 0\nconsole.log(breakpoints.small);    // Output: 544\nconsole.log(breakpoints.medium);   // Output: 768\nconsole.log(breakpoints.large);    // Output: 992\nconsole.log(breakpoints.huge);     // Output: 1216\nconsole.log(breakpoints.enormous); // Output: 1440\n```\n\n#### `ActiveBreakpointProvider`/`ActiveBreakpointContext`\n\nThe `ActiveBreakpointProvider` determines the currently active breakpoint and communicates it to its children using the `ActiveBreakpointContext`.\n\n> Remember: An `ActiveBreakpointProvider` is rendered internally by the `ApplicationBase` component. The `ActiveBreakpointProvider` component should not be rendered directly.\n\n```jsx\nimport { useContext } from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport { ActiveBreakpointContext } from 'terra-application/lib/breakpoints';\n\nconst ExampleContent = () => {\n  const activeBreakpoint = useContext(ActiveBreakpointContext);\n\n  return <p>The active breakpoint is: {activeBreakpoint}</p>;\n}\n\nexport default () => (\n  <ApplicationBase\n    locale=\"en-US\"\n  >\n    <ExampleContent />\n  </ApplicationBase>\n)\n```\n\nIn addition to the JS utilities, a Sass partial containing media query mixins based on the defined breakpoints is also available.\n\n```scss\n@import '~terra-application/lib/breakpoints/media-queries';\n\n.example {\n  color: blue;\n\n  @include terra-mq-small-up {\n    color: red;\n  }\n\n  @include terra-mq-medium-up {\n    color: purple;\n  }\n\n  @include terra-mq-large-up {\n    color: green;\n  }\n\n  @include terra-mq-huge-up {\n    color: yellow;\n  }\n\n  @include terra-mq-enormous-up {\n    color: orange;\n  }\n}\n```\n\nPlease see the documentation for the `terra-breakpoints` package for more information.\n\n### Progressive Disclosure\n\n`terra-application` provides components that manage progressively disclosed application content.\n\n#### `DisclosureManager`\n\nThe `DisclosureManager` defines a generalized API for managing progressively disclosed application content.\n\nPlease see the documentation for the `terra-disclosure-manager` package for detailed API information. All of the exports from the `terra-disclosure-manager` package are exported from the `terra-application/lib/disclosure-manager` directory.\n\n```jsx\nimport DisclosureManager,\n{\n  withDisclosureManager,\n  disclosureManagerShape,\n  DisclosureManagerContext,\n  DisclosureManagerDelegate,\n} from 'terra-application/lib/disclosure-manager';\n```\n\n> Remember: `terra-application` repackages the contents of the `terra-disclosure-manager` package to help maintain version/instance consistency. The `terra-disclosure-manager` package should not be consumed directly if `terra-application` is also being consumed.\n\n#### `ModalManager`\n\nThe `ModalManager` is an implementation of the `DisclosureManager` that renders progressively disclosed content within a modal.\n\nPlease see the documentation for the `terra-modal-manager` package for detailed API information. All of the exports from the `terra-modal-manager` package are exported from the `terra-application/lib/modal-manager` directory.\n\n```jsx\nimport ModalManager from 'terra-application/lib/modal-manager';\n```\n\n> Remember: `terra-application` repackages the contents of the `terra-modal-manager` package to help maintain version/instance consistency. The `terra-modal-manager` package should not be consumed directly if `terra-application` is also being consumed.\n\n#### `SlidePanelManager`\n\nThe `SlidePanelManager` is an implementation of the `DisclosureManager` that renders progressively disclosed content within a SlidePanel (as provided by `terra-slide-panel`).\n\nPlease see the documentation for the `terra-slide-panel-manager` package for detailed API information. All of the exports from the `terra-slide-panel-manager` package are exported from the `terra-application/lib/slide-panel-manager` directory.\n\n```jsx\nimport SlidePanelManager from 'terra-application/lib/slide-panel-manager';\n```\n\n> Remember: `terra-application` repackages the contents of the `terra-slide-panel-manager` package to help maintain version/instance consistency. The `terra-slide-panel-manager` package should not be consumed directly if `terra-application` is also being consumed.\n\n#### Example Usage\n\nThe `ApplicationBase` component does not provide a default DisclosureManager implementation to handle progressive disclosure. The below example shows a possible implementation using the ModalManager.\n\n```jsx\nimport { useContext } from 'react';\nimport ApplicationBase from 'terra-application/lib/application-base';\nimport { DisclosureManagerContext } from 'terra-application/lib/disclosure-manager';\nimport ModalManager from 'terra-application/lib/modal-manager';\n\nconst DisclosedContent = () => {\n  const disclosureManager = useContext(DisclosureManagerContext);\n\n  return (\n    <button\n      onClick={() => {\n        disclosureManager.dismiss();\n      }}\n    >\n      Dismiss Disclosure\n    </button>\n  );\n}\n\nconst ExampleContent = () => {\n  const disclosureManager = useContext(DisclosureManagerContext);\n\n  return (\n    <button\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'modal',\n          size: 'large',\n          content: {\n            key: 'my-disclosed-content',\n            content: <DisclosedContent />,\n          }\n        })\n      }}\n    >\n      Show Disclosure\n    </button>\n  );\n}\n\nexport default () => (\n  <ApplicationBase\n    locale=\"en-US\"\n  >\n    <ModalManager>\n      <ExampleContent />\n    </ModalManager>\n  </ApplicationBase>\n)\n```\n\n### User Prompting\n\n`terra-application` includes components that allow components to warn and prompt users prior to destructive navigation events.\n\n#### `NavigationPrompt`/`NavigationPromptCheckpoint`\n\nThe `NavigationPrompt` and `NavigationPromptCheckpoint` components define a registration pipeline between components that have transient state and the components that render them.\n\nPlease see the documentation for the `terra-navigation-prompt` package for detailed API information. All of the exports from the `terra-navigation-prompt` package are exported from the `terra-application/lib/navigation-prompt` directory.\n\n```jsx\nimport NavigationPrompt, {\n  NavigationPromptCheckpoint,\n  PromptRegistrationContext\n} from 'terra-application/lib/navigation-prompt';\n```\n\n> Remember: `terra-application` repackages the contents of the `terra-navigation-prompt` package to help maintain version/instance consistency. The `terra-navigation-prompt` package should not be consumed directly if `terra-application` is also being consumed.\n\n## Component Features\n\n- [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n- [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n- [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n"},1698:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nimport Base from 'terra-base';\nimport ThemeProvider from 'terra-theme-provider';\nimport { ActiveBreakpointProvider } from 'terra-breakpoints';\n\nimport styles from './ApplicationBase.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The components to render within ApplicationBase.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * The locale name to be used to load translated messages.\n   */\n  locale: PropTypes.string.isRequired,\n  /**\n   * Custom translations for the current locale.\n   */\n  customTranslatedMessages: (props, propName, componentName) => {\n    if (!props[propName]) {\n      return null;\n    }\n\n    if (Object.keys(props[propName]).length !== 0 && props.locale === undefined) {\n      return new Error(`Missing locale prop for ${propName} in ${componentName} props`);\n    }\n\n    return null;\n  },\n  /**\n   * The component to render while the translation files are being retrieved.\n   * NOTE: Absolutely no locale-dependent logic should be\n   * utilized in this placeholder.\n   */\n  translationsLoadingPlaceholder: PropTypes.node,\n  /**\n   * The name of the theme to apply to the application using terra-theme-provider.\n   */\n  themeName: PropTypes.string,\n  /**\n   * If provided, the theme styles are applied to the entire document.\n   */\n  themeIsGlobal: PropTypes.bool,\n  /**\n   * By default, the elements rendered by Application are fit to the Application's parent using 100% height.\n   * If `fitToParentIsDisabled` is provided, the Application will render at its intrinsic content height and\n   * overflow potentially overflow its parent.\n   */\n  fitToParentIsDisabled: PropTypes.bool,\n};\n\nconst ApplicationBase = ({\n  locale, customTranslatedMessages, translationsLoadingPlaceholder, themeName, themeIsGlobal, fitToParentIsDisabled, children,\n}) => (\n  <ThemeProvider\n    className={cx('application-theme-provider', { fill: !fitToParentIsDisabled })}\n    themeName={themeName}\n    isGlobalTheme={themeIsGlobal}\n  >\n    <Base\n      className={cx('application-base', { fill: !fitToParentIsDisabled })}\n      customMessages={customTranslatedMessages}\n      translationsLoadingPlaceholder={translationsLoadingPlaceholder}\n      locale={locale}\n    >\n      <ActiveBreakpointProvider>\n        {children}\n      </ActiveBreakpointProvider>\n    </Base>\n  </ThemeProvider>\n);\n\nApplicationBase.propTypes = propTypes;\n\nexport default ApplicationBase;\n"},2235:function(e,n,t){"use strict";var a=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=a(t(0)),r=a(t(961)),i=t(1696),s=a(t(1697)),p=a(t(1698)),l=function(){return o.default.createElement(r.default,{packageName:i.name,readme:s.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(i.name),propsTables:[{componentName:"ApplicationBase Props",componentSrc:p.default}]})};n.default=l},962:function(e,n){}}]);
//# sourceMappingURL=211-84bfb2350e6dfa783b67.js.map