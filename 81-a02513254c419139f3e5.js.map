{"version":3,"sources":["webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputDocCommon.module.scss?9355","webpack:///./packages/terra-time-input/docs/README.md","webpack:///./packages/terra-time-input/src/TimeInput.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputDefaultTime.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputDefaultTime.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputDefaultTwelveHour.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputDefaultTwelveHour.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputNoDefaultTime.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputNoDefaultTime.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputNoDefaultTwelveHour.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputNoDefaultTwelveHour.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputSeconds.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputSeconds.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputSecondsWithDefault.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputSecondsWithDefault.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/example/TimeInputSecondsTwelveHour.js","webpack:///./packages/terra-time-input/src/terra-dev-site/doc/example/TimeInputSecondsTwelveHour.jsx","webpack:///./packages/terra-time-input/lib/terra-dev-site/doc/time-input/TimeInput.1.doc.js"],"names":["module","exports","_interopRequireDefault","require","Object","defineProperty","value","default","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_react","_terraTimeInput","_bind","_TimeInputDocCommonModule","cx","bind","_default","_React$Component","timeInput","props","_this","this","call","state","time","handleTimeChange","key","event","setState","createElement","className","name","onChange","Component","_TimeInput","_TimeUtil","variant","FORMAT_12_HOUR","showSeconds","_terraDocTemplate","_README","_package","_TimeInputDefaultTime","_TimeInputDefaultTime2","_TimeInputDefaultTwelveHour","_TimeInputDefaultTwelveHour2","_TimeInputNoDefaultTime","_TimeInputNoDefaultTime2","_TimeInputNoDefaultTwelveHour","_TimeInputNoDefaultTwelveHour2","_TimeInputSeconds","_TimeInputSeconds2","_TimeInputSecondsWithDefault","_TimeInputSecondsWithDefault2","_TimeInputSecondsTwelveHour","_TimeInputSecondsTwelveHour2","packageName","readme","srcPath","concat","examples","title","example","source","propsTables","componentName","componentSrc"],"mappings":"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","file":"81-a02513254c419139f3e5.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"time-wrapper\":\"TimeInputDocCommon-module__time-wrapper___2P8HH\"};","export default \"# Terra Time Input\\n\\nThe terra-time-input component is a controlled input component for entering time. It is a controlled component because it manages the state of the value in the input. Because this is a controlled input component, it cannot accept the defaultValue prop as it always uses the value prop. React does not allow having both the defaultValue and value props.\\n\\nThere are two types of clocks that are currently supported: A 12-hour clock and a 24-hour clock. This can be controlled through the `variant` prop on the component. There are also two currently supported time formats: (hh:mm) and (hh:mm:ss). Seconds are not included by default and is controlled through the `showSeconds` prop. If seconds are shown then the user must enter a value for the time entry to be considered valid.\\n\\nIf a 24 hour clock is chosen, the hour displayed will be a value between 0 and 23 inclusively, and the minute displayed will be between 0 and 59 inclusively as well. When a single key is pressed on the hour input, a 0 will automatically be prepended to the hour if the entered hour is greater than 2. Likewise, a 0 will automatically be prepended to the minute if the inputed key value is greater than 5. In addition, the inputs can be changed through the use of the up and down arrow keys on a non-mobile display.\\n\\nIf a 12 hour clock is chosen, the hour will be displayed between 01 and 12 inclusively, and an additional meridiem will be appended to the time input. The values of the meridiem are internationalized, meaning the time input will automatically initialize the post meridiem and ante meridiem for you. For the behavior of the hour input will inherit the behavior of the 24 hour clock with a few additions. Inputting 00 will automatically change the value to 12 for both meridiems. The up and down arrow keys have new additions as well. If up is pressed and the hour is 12, it will be set to 01. If the hour is 12 and down is pressed, the meridiem will be switched in addition to decrementing the hour to 11.\\n\\n**Note:** Not all locales support a 12 hour clock. If a 12 hour clock is generated for a locale that doesn't have am and pm values, messages will not be generated for the am and pm values.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n  - `npm install terra-time-input`\\n  - `yarn add terra-time-input`\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n## Peer Dependencies\\n\\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\\n\\n| Peer Dependency | Version |\\n|-|-|\\n| react | ^16.8.5 |\\n| react-dom | ^16.8.5 |\\n| react-intl | ^2.8.0 |\\n\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Usage\\n\\n```jsx\\nimport React from 'react';\\nimport TimeInput from 'terra-time-input';\\n\\n<TimeInput\\n  name=\\\"admission-time\\\"\\n  value={'12:30'}\\n  onChange={this.handleChange}\\n/>\\n```\\n\\n## Component Features\\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport Input from 'terra-form-input';\\nimport ButtonGroup from 'terra-button-group';\\nimport { injectIntl, intlShape } from 'react-intl';\\n\\nimport * as KeyCode from 'keycode-js';\\nimport TimeUtil from './TimeUtil';\\nimport styles from './TimeInput.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * Whether the time input should be disabled.\\n   */\\n  disabled: PropTypes.bool,\\n  /**\\n   * Custom input attributes that apply to the hour, minute, and second inputs.\\n   */\\n  // eslint-disable-next-line react/forbid-prop-types\\n  inputAttributes: PropTypes.object,\\n  /**\\n   * Custom input attributes to apply to the hour input\\n   */\\n  // eslint-disable-next-line react/forbid-prop-types\\n  hourAttributes: PropTypes.object,\\n  /**\\n  * @private\\n  * intl object programmatically imported through injectIntl from react-intl.\\n  * */\\n  intl: intlShape.isRequired,\\n  /**\\n   * Custom input attributes to apply to the minutes input\\n   */\\n  // eslint-disable-next-line react/forbid-prop-types\\n  minuteAttributes: PropTypes.object,\\n  /**\\n   * Name of the time input. The name should be unique.\\n   */\\n  name: PropTypes.string.isRequired,\\n  /**\\n   * A callback function to execute when the entire time input component loses focus.\\n   * This event does not get triggered when the focus is moved from the hour input to the minute input or meridiem because the focus is still within the main time input component.\\n   */\\n  onBlur: PropTypes.func,\\n  /**\\n   * A callback function to execute when either the hour or minute has been changed.\\n   * The first parameter is the event. The second parameter is the changed time value.\\n   */\\n  onChange: PropTypes.func,\\n  /**\\n   * A callback function triggered when the hour input or minute input receives focus.\\n   */\\n  onFocus: PropTypes.func,\\n  /**\\n   * Callback ref to pass into the input dom element.\\n   */\\n  refCallback: PropTypes.func,\\n  /**\\n   * Custom input attributes to apply to the seconds input\\n   */\\n  // eslint-disable-next-line react/forbid-prop-types\\n  secondAttributes: PropTypes.object,\\n  /**\\n   * Whether the input for seconds should be displayed or not. If true then the second field must have a valid\\n   * number for the overall time to be considered valid.\\n   */\\n  showSeconds: PropTypes.bool,\\n  /**\\n   * An ISO 8601 string representation of the time value in the input.\\n   */\\n  value: PropTypes.string,\\n  /**\\n   * Type of time input to initialize. Must be `24-hour` or `12-hour`.\\n   * The `de`, `es-ES`, `fr-FR`, `fr`, `nl-BE`, `nl`, `pt-BR`, `pt`, `sv-SE` and `sv` locales do not use the 12-hour time notation.\\n   * If the `variant` prop if set to `12-hour` for one of these supported locales, the variant will be ignored and defaults to `24-hour`.\\n   */\\n  variant: PropTypes.oneOf([TimeUtil.FORMAT_12_HOUR, TimeUtil.FORMAT_24_HOUR]),\\n};\\n\\nconst defaultProps = {\\n  disabled: false,\\n  inputAttributes: {},\\n  minuteAttributes: {},\\n  hourAttributes: {},\\n  onBlur: null,\\n  onChange: null,\\n  onFocus: undefined,\\n  refCallback: undefined,\\n  secondAttributes: {},\\n  showSeconds: false,\\n  value: undefined,\\n  variant: TimeUtil.FORMAT_24_HOUR,\\n};\\n\\nclass TimeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    let { value } = this.props;\\n    const { showSeconds } = this.props;\\n\\n    if (value && !TimeUtil.validateTime(value, showSeconds)) {\\n      if (process.env !== 'production') {\\n        // eslint-disable-next-line no-console\\n        console.warn(\\n          `An invalid time value, ${value}, has been passed to the terra-time-picker. `\\n          + 'This value has been ignored and will not be rendered. '\\n          + `Time values must be in ${showSeconds ? 'hh:mm:ss' : 'hh:mm'} format because showSeconds is ${showSeconds}.`,\\n        );\\n      }\\n\\n      value = undefined;\\n    }\\n\\n    this.timeInputContainer = React.createRef();\\n    this.handleHourChange = this.handleHourChange.bind(this);\\n    this.handleMinuteChange = this.handleMinuteChange.bind(this);\\n    this.handleSecondChange = this.handleSecondChange.bind(this);\\n    this.handleHourInputKeyDown = this.handleHourInputKeyDown.bind(this);\\n    this.handleMinuteInputKeyDown = this.handleMinuteInputKeyDown.bind(this);\\n    this.handleSecondInputKeyDown = this.handleSecondInputKeyDown.bind(this);\\n    this.handleFocus = this.handleFocus.bind(this);\\n    this.handleHourFocus = this.handleHourFocus.bind(this);\\n    this.handleMinuteFocus = this.handleMinuteFocus.bind(this);\\n    this.handleSecondFocus = this.handleSecondFocus.bind(this);\\n    this.handleHourBlur = this.handleHourBlur.bind(this);\\n    this.handleMinuteBlur = this.handleMinuteBlur.bind(this);\\n    this.handleSecondBlur = this.handleSecondBlur.bind(this);\\n    this.handleMeridiemBlur = this.handleMeridiemBlur.bind(this);\\n    this.handleMeridiemChange = this.handleMeridiemChange.bind(this);\\n    this.handleMeridiemInputKeyDown = this.handleMeridiemInputKeyDown.bind(this);\\n    this.handleMeridiemInputFocus = this.handleMeridiemInputFocus.bind(this);\\n    this.handleMeridiemSelectFocus = this.handleMeridiemSelectFocus.bind(this);\\n    this.handleMeridiemButtonChange = this.handleMeridiemButtonChange.bind(this);\\n\\n    let hour = TimeUtil.splitHour(value);\\n    let meridiem;\\n\\n    if (TimeUtil.getVariantFromLocale(props) === TimeUtil.FORMAT_12_HOUR) {\\n      if (!this.props.intl.messages['Terra.timeInput.am'] || !this.props.intl.messages['Terra.timeInput.pm']) {\\n        if (process.env !== 'production') {\\n          // eslint-disable-next-line no-console\\n          console.warn('This locale only uses 24 hour clock. The ante meridiem and post meridiem will not be displayed');\\n        }\\n\\n        this.anteMeridiem = '';\\n        this.postMeridiem = '';\\n      } else {\\n        this.anteMeridiem = this.props.intl.formatMessage({ id: 'Terra.timeInput.am' });\\n        this.postMeridiem = this.props.intl.formatMessage({ id: 'Terra.timeInput.pm' });\\n      }\\n\\n      if (hour) {\\n        const parsedHour = TimeUtil.parseTwelveHourTime(hour, this.anteMeridiem, this.postMeridiem);\\n        hour = parsedHour.hourString;\\n        // eslint-disable-next-line prefer-destructuring\\n        meridiem = parsedHour.meridiem;\\n      } else {\\n        meridiem = this.anteMeridiem;\\n      }\\n    }\\n\\n    this.state = {\\n      hour,\\n      minute: TimeUtil.splitMinute(value),\\n      second: TimeUtil.splitSecond(value),\\n      isFocused: false,\\n      meridiem,\\n      hourInitialFocused: false,\\n      minuteInitialFocused: false,\\n      secondInitialFocused: false,\\n      meridiemFocused: false,\\n    };\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    const variant = TimeUtil.getVariantFromLocale(this.props);\\n\\n    if (\\n      this.props.value === prevProps.value\\n      && variant === TimeUtil.getVariantFromLocale(prevProps)\\n    ) {\\n      return;\\n    }\\n\\n    let hour = TimeUtil.splitHour(this.props.value);\\n    let { meridiem } = this.state;\\n\\n    if (variant === TimeUtil.FORMAT_12_HOUR) {\\n      this.anteMeridiem = this.props.intl.formatMessage({ id: 'Terra.timeInput.am' });\\n      this.postMeridiem = this.props.intl.formatMessage({ id: 'Terra.timeInput.pm' });\\n\\n      if (hour) {\\n        const parsedHour = TimeUtil.parseTwelveHourTime(hour, this.anteMeridiem, this.postMeridiem);\\n        hour = parsedHour.hourString;\\n        // eslint-disable-next-line prefer-destructuring\\n        meridiem = parsedHour.meridiem;\\n      }\\n    }\\n\\n    // eslint-disable-next-line react/no-did-update-set-state\\n    this.setState({\\n      hour,\\n      minute: TimeUtil.splitMinute(this.props.value),\\n      second: TimeUtil.splitSecond(this.props.value),\\n      meridiem,\\n    });\\n  }\\n\\n  handleFocus(event) {\\n    if (this.props.onFocus && !this.timeInputContainer.current.contains(event.relatedTarget)) {\\n      this.props.onFocus(event);\\n    }\\n\\n    this.setState({ isFocused: true });\\n  }\\n\\n  handleSecondFocus(event) {\\n    this.handleFocus(event);\\n    this.setState({ secondInitialFocused: true });\\n    this.secondInput.setSelectionRange(0, this.secondInput.value.length);\\n  }\\n\\n  handleMinuteFocus(event) {\\n    this.handleFocus(event);\\n    this.setState({ minuteInitialFocused: true });\\n    this.minuteInput.setSelectionRange(0, this.minuteInput.value.length);\\n  }\\n\\n  handleHourFocus(event) {\\n    this.handleFocus(event);\\n    this.setState({ hourInitialFocused: true });\\n    this.hourInput.setSelectionRange(0, this.hourInput.value.length);\\n  }\\n\\n  handleHourBlur(event) {\\n    this.handleBlur(event, TimeUtil.inputType.HOUR);\\n    this.setState({ hourInitialFocused: false });\\n  }\\n\\n  handleMinuteBlur(event) {\\n    this.handleBlur(event, TimeUtil.inputType.MINUTE);\\n    this.setState({ minuteInitialFocused: false });\\n  }\\n\\n  handleSecondBlur(event) {\\n    this.handleBlur(event, TimeUtil.inputType.SECOND);\\n    this.setState({ secondInitialFocused: false });\\n  }\\n\\n  handleMeridiemBlur(event) {\\n    this.handleBlur(event, TimeUtil.inputType.MERIDIEM);\\n    this.setState({ meridiemFocused: false });\\n  }\\n\\n  handleBlur(event, type) {\\n    this.setState({ isFocused: false });\\n\\n    if (type === TimeUtil.inputType.HOUR || type === TimeUtil.inputType.MINUTE || type === TimeUtil.inputType.SECOND) {\\n      let stateValue = event.target.value;\\n\\n      // Prepend a 0 to the value when losing focus and the value is single digit.\\n      if (stateValue.length === 1) {\\n        if (TimeUtil.getVariantFromLocale(this.props) === TimeUtil.FORMAT_12_HOUR\\n          && type === TimeUtil.inputType.HOUR\\n          && stateValue === '0') {\\n          stateValue = '12';\\n        } else {\\n          stateValue = '0'.concat(stateValue);\\n        }\\n\\n        this.handleValueChange(event, type, stateValue, this.state.meridiem);\\n      }\\n    }\\n\\n    if (this.props.onBlur) {\\n      // Modern browsers support event.relatedTarget but event.relatedTarget returns null in IE 10 / IE 11.\\n      // IE 11 sets document.activeElement to the next focused element before the blur event is called.\\n      const activeTarget = event.relatedTarget ? event.relatedTarget : document.activeElement;\\n\\n      // Handle blur only if focus has moved out of the entire time input component.\\n      if (!this.timeInputContainer.current.contains(activeTarget)) {\\n        this.props.onBlur(event);\\n      }\\n    }\\n  }\\n\\n  handleHourChange(event) {\\n    if (!TimeUtil.validNumericInput(event.target.value)) {\\n      return;\\n    }\\n\\n    let inputValue = event.target.value;\\n    const stateValue = this.state.hour;\\n    const variant = TimeUtil.getVariantFromLocale(this.props);\\n    const maxValue = variant === TimeUtil.FORMAT_12_HOUR ? 12 : 23;\\n\\n    // Ignore the entry if the value did not change or it is invalid.\\n    // When 'Predictive text' is enabled on Android the maxLength attribute on the input is ignored so we have to\\n    // check the length of inputValue to make sure that it is less then 2.\\n    if (inputValue === stateValue || inputValue.length > 2 || Number(inputValue) > maxValue) {\\n      return;\\n    }\\n\\n    // If the change made was not a deletion of a digit, then prepend '0' if the input value is a\\n    // single digit value between 3 and 9 for a 24 hour time, or 2 and 9 for a 12 hour clock\\n    if (inputValue.length >= stateValue.length) {\\n      const digitsToPrependZero = ['3', '4', '5', '6', '7', '8', '9'];\\n\\n      if (variant === TimeUtil.FORMAT_12_HOUR) {\\n        digitsToPrependZero.push('2');\\n      }\\n\\n      if (digitsToPrependZero.indexOf(inputValue) > -1) {\\n        inputValue = '0'.concat(inputValue);\\n      }\\n    }\\n\\n    if (inputValue === '00' && variant === TimeUtil.FORMAT_12_HOUR) {\\n      inputValue = '12';\\n    }\\n\\n    // Move focus to the minute input if the hour input has a valid and complete entry.\\n    const moveFocusOnChange = () => {\\n      if (inputValue.length === 2) {\\n        this.minuteInput.focus();\\n      }\\n    };\\n\\n    this.handleValueChange(event, TimeUtil.inputType.HOUR, inputValue, this.state.meridiem, moveFocusOnChange);\\n  }\\n\\n  handleMinuteChange(event) {\\n    if (!TimeUtil.validNumericInput(event.target.value)) {\\n      return;\\n    }\\n\\n    let inputValue = event.target.value;\\n    const stateValue = this.state.minute;\\n    const maxValue = 59;\\n\\n    // Ignore the entry if the value did not change or it is invalid.\\n    // When 'Predictive text' is enabled on Android the maxLength attribute on the input is ignored so we have\\n    // to check the length of inputValue to make sure that it is less then 2.\\n    if (inputValue === stateValue || inputValue.length > 2 || Number(inputValue) > maxValue) {\\n      return;\\n    }\\n\\n    // If the change made was not a deletion of a digit, then prepend '0'\\n    // if the input value is a single digit value between 6 and 9.\\n    if (inputValue.length >= stateValue.length) {\\n      const digitsToPrependZero = ['6', '7', '8', '9'];\\n      if (digitsToPrependZero.indexOf(inputValue) > -1) {\\n        inputValue = '0'.concat(inputValue);\\n      }\\n    }\\n\\n    const moveFocusOnChange = () => {\\n      if (inputValue.length === 2) {\\n        if (this.props.showSeconds) {\\n          // Move focus to second if second is shown and minute input has a valid and complete entry\\n          this.secondInput.focus();\\n        } else if (TimeUtil.getVariantFromLocale(this.props) === TimeUtil.FORMAT_12_HOUR && this.meridiemSelect) {\\n          // Else move focus to the meridiem for 12 hours times if the minute input has a valid and complete entry.\\n          this.meridiemSelect.focus();\\n        }\\n      }\\n    };\\n\\n    this.handleValueChange(event, TimeUtil.inputType.MINUTE, inputValue, this.state.meridiem, moveFocusOnChange);\\n  }\\n\\n  handleSecondChange(event) {\\n    if (!TimeUtil.validNumericInput(event.target.value)) {\\n      return;\\n    }\\n\\n    let inputValue = event.target.value;\\n    const stateValue = this.state.second;\\n    const maxValue = 59;\\n\\n    // Ignore the entry if the value did not change or it is invalid.\\n    // When 'Predictive text' is enabled on Android the maxLength attribute on the input is ignored so we have\\n    // to check the length of inputValue to make sure that it is less then 2.\\n    if (inputValue === stateValue || inputValue.length > 2 || Number(inputValue) > maxValue) {\\n      return;\\n    }\\n\\n    // If the change made was not a deletion of a digit, then prepend '0'\\n    // if the input value is a single digit value between 6 and 9.\\n    if (inputValue.length >= stateValue.length) {\\n      const digitsToPrependZero = ['6', '7', '8', '9'];\\n      if (digitsToPrependZero.indexOf(inputValue) > -1) {\\n        inputValue = '0'.concat(inputValue);\\n      }\\n    }\\n\\n    const moveFocusOnChange = () => {\\n      // Move focus to the meridiem for 12 hours times if the second input has a valid and complete entry.\\n      if (TimeUtil.getVariantFromLocale(this.props) === TimeUtil.FORMAT_12_HOUR && inputValue.length === 2 && this.meridiemSelect) {\\n        this.meridiemSelect.focus();\\n      }\\n    };\\n\\n    this.handleValueChange(event, TimeUtil.inputType.SECOND, inputValue, this.state.meridiem, moveFocusOnChange);\\n  }\\n\\n  handleMeridiemChange(event) {\\n    this.setState({\\n      meridiem: event.target.value,\\n    });\\n\\n    this.handleValueChange(event, TimeUtil.inputType.HOUR, this.state.hour.toString(), event.target.value);\\n  }\\n\\n  handleMeridiemInputFocus(event) {\\n    // When clicked to put focus on the meridiem input, the focus would then need to be passed and set on the meridium select,\\n    // which would call handleMeridiemSelectFocus, to get the desired behavior and styles.\\n    this.meridiemSelect.focus();\\n\\n    if (this.props.onFocus && !this.timeInputContainer.current.contains(event.relatedTarget)) {\\n      this.props.onFocus(event);\\n    }\\n  }\\n\\n  handleMeridiemSelectFocus() {\\n    this.setState({\\n      isFocused: true,\\n      meridiemFocused: true,\\n    });\\n  }\\n\\n  /**\\n   * Takes a key input from the hour input, and processes it based on the value of the keycode.\\n   * If the key is an up or down arrow, it increments/decrements the hour. If the right arrow\\n   * is pressed, it shifts focus to the minute input.\\n   * @param {Object} event Event object generated from the event delegation.\\n   */\\n  handleHourInputKeyDown(event) {\\n    let stateValue = this.state.hour;\\n    let { meridiem } = this.state;\\n    const previousStateValue = stateValue;\\n    const variant = TimeUtil.getVariantFromLocale(this.props);\\n\\n    if (event.keyCode === KeyCode.KEY_UP) {\\n      stateValue = TimeUtil.incrementHour(stateValue, variant);\\n\\n      // Hitting 12 when incrementing up changes the meridiem\\n      if (variant === TimeUtil.FORMAT_12_HOUR && stateValue === '12') {\\n        if (meridiem === this.postMeridiem || !previousStateValue) {\\n          meridiem = this.anteMeridiem;\\n        } else {\\n          meridiem = this.postMeridiem;\\n        }\\n      }\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_DOWN) {\\n      stateValue = TimeUtil.decrementHour(stateValue, variant);\\n\\n      // Hitting 11 when incrementing down changes the meridiem\\n      if (variant === TimeUtil.FORMAT_12_HOUR && stateValue === '11') {\\n        meridiem = meridiem === this.postMeridiem ? this.anteMeridiem : this.postMeridiem;\\n      }\\n    }\\n\\n    if (stateValue !== previousStateValue) {\\n      this.handleValueChange(event, TimeUtil.inputType.HOUR, stateValue, meridiem);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_RIGHT) {\\n      this.focusMinuteFromHour(event);\\n    }\\n  }\\n\\n  focusMinuteFromHour(event) {\\n    // If the hour is empty or the cursor is after the value, move focus to the minute input when the right arrow is pressed.\\n    if (this.state.hour.length === 0 || this.state.hour.length === this.hourInput.selectionEnd) {\\n      this.minuteInput.focus();\\n      this.minuteInput.setSelectionRange(0, 0);\\n      event.preventDefault();\\n    }\\n  }\\n\\n  /**\\n   * Takes a key input from the minute input, and processes it based on the value of the keycode.\\n   * If the key is an up or down arrow, it increments/decrements the minute. If the left arrow\\n   * is pressed, it shifts focus to the hour input. If the right arrow is pressed, it shifts\\n   * focus to the merdiem input.\\n   * @param {Object} event Event object generated from the event delegation.\\n   */\\n  handleMinuteInputKeyDown(event) {\\n    let stateValue = this.state.minute;\\n    const previousStateValue = stateValue;\\n\\n    if (event.keyCode === KeyCode.KEY_UP) {\\n      stateValue = TimeUtil.incrementMinute(stateValue);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_DOWN) {\\n      stateValue = TimeUtil.decrementMinute(stateValue);\\n    }\\n\\n    if (previousStateValue !== stateValue) {\\n      this.handleValueChange(event, TimeUtil.inputType.MINUTE, stateValue, this.state.meridiem);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_LEFT\\n      || event.keyCode === KeyCode.KEY_DELETE\\n      || event.keyCode === KeyCode.KEY_BACK_SPACE) {\\n      this.focusHour(event);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_RIGHT) {\\n      if (this.props.showSeconds) {\\n        this.focusSecondFromMinute(event);\\n      } else {\\n        this.focusMeridiemFromMinute(event);\\n      }\\n    }\\n  }\\n\\n  focusHour(event) {\\n    // If the cursor is at the left most position in the minute input, is empty or the cursor is before the value,\\n    // move focus to the hour input\\n\\n    if (this.minuteInput.selectionEnd === 0) {\\n      this.hourInput.focus();\\n      if (this.state.hour) {\\n        this.hourInput.setSelectionRange(this.state.hour.length, this.state.hour.length);\\n        event.preventDefault();\\n      }\\n    }\\n  }\\n\\n  focusMeridiemFromMinute(event) {\\n    // If the minute is empty or the cursor is after the value, move focus to the meridiem.\\n    if ((this.state.minute.length === 0\\n      || this.state.minute.length === this.minuteInput.selectionEnd)\\n      && this.meridiemSelect\\n    ) {\\n      this.meridiemSelect.focus();\\n      event.preventDefault();\\n    }\\n  }\\n\\n  focusSecondFromMinute(event) {\\n    // If the minute is empty or the cursor is after the value, move focus to the meridiem.\\n    if ((this.state.minute.length === 0\\n        || this.state.minute.length === this.minuteInput.selectionEnd)\\n        && this.secondInput\\n    ) {\\n      this.secondInput.focus();\\n      if (this.state.second) {\\n        this.secondInput.setSelectionRange(0, 0);\\n        event.preventDefault();\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Takes a key input from the second input, and processes it based on the value of the keycode.\\n   * If the key is an up or down arrow, it increments/decrements the second. If the left arrow\\n   * is pressed, it shifts focus to the minute input. If the right arrow is pressed, it shifts\\n   * focus to the merdiem input.\\n   * @param {Object} event Event object generated from the event delegation.\\n   */\\n  handleSecondInputKeyDown(event) {\\n    let stateValue = this.state.second;\\n    const previousStateValue = stateValue;\\n\\n    if (event.keyCode === KeyCode.KEY_UP) {\\n      stateValue = TimeUtil.incrementSecond(stateValue);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_DOWN) {\\n      stateValue = TimeUtil.decrementSecond(stateValue);\\n    }\\n\\n    if (previousStateValue !== stateValue) {\\n      this.handleValueChange(event, TimeUtil.inputType.SECOND, stateValue, this.state.meridiem);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_LEFT\\n        || event.keyCode === KeyCode.KEY_DELETE\\n        || event.keyCode === KeyCode.KEY_BACK_SPACE) {\\n      this.focusMinuteFromSecond(event);\\n    }\\n\\n    if (event.keyCode === KeyCode.KEY_RIGHT) {\\n      this.focusMeridiemFromSecond(event);\\n    }\\n  }\\n\\n  focusMinuteFromSecond(event) {\\n    // If the cursor is at the left most position in the second input, is empty or the cursor is before the value,\\n    // move focus to the minute input\\n\\n    if (this.secondInput.selectionEnd === 0) {\\n      this.minuteInput.focus();\\n      if (this.state.minute) {\\n        this.minuteInput.setSelectionRange(this.state.minute.length, this.state.minute.length);\\n        event.preventDefault();\\n      }\\n    }\\n  }\\n\\n  focusMeridiemFromSecond(event) {\\n    // If the second is empty or the cursor is after the value, move focus to the meridiem.\\n    if ((this.state.second.length === 0\\n        || this.state.second.length === this.secondInput.selectionEnd)\\n        && this.meridiemSelect\\n    ) {\\n      this.meridiemSelect.focus();\\n      event.preventDefault();\\n    }\\n  }\\n\\n  handleValueChange(event, type, timeValue, meridiem, moveFocusOnChange) {\\n    if (type === TimeUtil.inputType.HOUR) {\\n      this.setState({\\n        hour: timeValue,\\n        meridiem,\\n        hourInitialFocused: false,\\n      }, moveFocusOnChange);\\n    } else if (type === TimeUtil.inputType.MINUTE) {\\n      this.setState({\\n        minute: timeValue,\\n        minuteInitialFocused: false,\\n      }, moveFocusOnChange);\\n    } else {\\n      this.setState({\\n        second: timeValue,\\n        secondInitialFocused: false,\\n      }, moveFocusOnChange);\\n    }\\n\\n    // Input values of length 1 indicate incomplete time, which means we cannot get a\\n    // reliable time so onChange isn't triggered.\\n    if (this.props.onChange && timeValue.length !== 1) {\\n      const hour = type === TimeUtil.inputType.HOUR ? timeValue : this.state.hour;\\n      const minute = type === TimeUtil.inputType.MINUTE ? timeValue : this.state.minute;\\n      const second = type === TimeUtil.inputType.SECOND ? timeValue : this.state.second;\\n\\n      if (hour === '' && minute === '' && second === '') {\\n        this.props.onChange(event, '');\\n      } else {\\n        this.props.onChange(event, this.formatHour(hour, meridiem).concat(':', minute).concat(this.props.showSeconds ? ':'.concat(second) : ''));\\n      }\\n    }\\n  }\\n\\n  formatHour(hour, meridiem) {\\n    if (!hour) {\\n      return hour;\\n    }\\n\\n    let tempHour = parseInt(hour, 10);\\n\\n    if (TimeUtil.getVariantFromLocale(this.props) === TimeUtil.FORMAT_12_HOUR) {\\n      if (meridiem === this.postMeridiem && tempHour < 12) {\\n        tempHour += 12;\\n      } else if (meridiem === this.anteMeridiem && tempHour === 12) {\\n        tempHour = 0;\\n      }\\n    }\\n\\n    let hourString = tempHour.toString();\\n\\n    if (hourString.length < 2) {\\n      hourString = '0'.concat(hourString);\\n    }\\n\\n    return hourString;\\n  }\\n\\n  handleMeridiemInputKeyDown(event) {\\n    if (event.keyCode === KeyCode.KEY_LEFT\\n        || event.keyCode === KeyCode.KEY_DELETE\\n        || event.keyCode === KeyCode.KEY_BACK_SPACE) {\\n      if (this.props.showSeconds) {\\n        this.secondInput.focus();\\n        if (this.state.second) {\\n          this.secondInput.setSelectionRange(this.state.second.length, this.state.second.length);\\n        }\\n      } else {\\n        this.minuteInput.focus();\\n        if (this.state.minute) {\\n          this.minuteInput.setSelectionRange(this.state.minute.length, this.state.minute.length);\\n        }\\n      }\\n      event.preventDefault();\\n    }\\n  }\\n\\n  mobileInput() {\\n    const {\\n      disabled,\\n      inputAttributes,\\n      minuteAttributes,\\n      hourAttributes,\\n      intl,\\n      onBlur,\\n      onChange,\\n      onFocus,\\n      name,\\n      refCallback,\\n      secondAttributes,\\n      showSeconds,\\n      value,\\n      variant,\\n      ...customProps\\n    } = this.props;\\n\\n    const instanceHoursAttrs = { ...hourAttributes };\\n    const instanceMinuteAttrs = { ...minuteAttributes };\\n    const instanceSecondAttrs = { ...secondAttributes };\\n    const variantFromLocale = TimeUtil.getVariantFromLocale(this.props);\\n\\n    // Using the state of hour, minute, and second (if shown) create a time in UTC represented in ISO 8601 format.\\n    let timeValue = '';\\n\\n    if (this.state.hour.length > 0 || this.state.minute.length > 0 || this.state.second.length > 0) {\\n      let hour = parseInt(this.state.hour, 10);\\n\\n      if (variantFromLocale === TimeUtil.FORMAT_12_HOUR && this.state.meridiem === this.postMeridiem && hour > 12) {\\n        hour += 12;\\n      }\\n\\n      timeValue = 'T'.concat(hour, ':', this.state.minute).concat(showSeconds ? ':'.concat(this.state.second) : '');\\n    }\\n\\n    if (!instanceHoursAttrs.id) {\\n      instanceHoursAttrs.id = 'terra-time-hour-'.concat(name);\\n    }\\n\\n    if (!instanceMinuteAttrs.id) {\\n      instanceMinuteAttrs.id = 'terra-time-minute-'.concat(name);\\n    }\\n\\n    if (!instanceSecondAttrs.id) {\\n      instanceSecondAttrs.id = 'terra-time-second-'.concat(name);\\n    }\\n\\n    return (\\n      <div\\n        {...customProps}\\n        className={cx(['mobile-time-picker', customProps.className])}\\n        ref={this.timeInputContainer}\\n      >\\n        <input\\n          // Create a hidden input for storing the name and value attributes to use when submitting the form.\\n          // The data stored in the value attribute will be the visible date in the date input but in ISO 8601 format.\\n          type=\\\"hidden\\\"\\n          name={name}\\n          value={timeValue}\\n        />\\n        <div className={cx('time-input-group')}>\\n          <Input\\n            {...inputAttributes}\\n            {...instanceHoursAttrs}\\n            refCallback={(inputRef) => {\\n              this.hourInput = inputRef;\\n              if (refCallback) refCallback(inputRef);\\n            }}\\n            className={cx('time-input-hour')}\\n            value={this.state.hour}\\n            name={'terra-time-hour-'.concat(name)}\\n            placeholder={intl.formatMessage({ id: 'Terra.timeInput.hh' })}\\n            maxLength=\\\"2\\\"\\n            onChange={this.handleHourChange}\\n            onKeyDown={this.handleHourInputKeyDown}\\n            onFocus={this.handleFocus}\\n            onBlur={this.handleHourBlur}\\n            size=\\\"2\\\"\\n            pattern=\\\"\\\\d*\\\"\\n            disabled={disabled}\\n          />\\n          <label htmlFor={instanceHoursAttrs.id} className={cx('mobile-input-label')}>\\n            {intl.formatMessage({ id: 'Terra.timeInput.hours' })}\\n          </label>\\n        </div>\\n        <span className={cx('time-spacer')}>:</span>\\n        <div className={cx('time-input-group')}>\\n          <Input\\n            {...inputAttributes}\\n            {...instanceMinuteAttrs}\\n            refCallback={(inputRef) => { this.minuteInput = inputRef; }}\\n            className={cx('time-input-minute', showSeconds ? 'with-second' : 'without-second')}\\n            value={this.state.minute}\\n            name={'terra-time-minute-'.concat(name)}\\n            placeholder={intl.formatMessage({ id: 'Terra.timeInput.mm' })}\\n            maxLength=\\\"2\\\"\\n            onChange={this.handleMinuteChange}\\n            onKeyDown={this.handleMinuteInputKeyDown}\\n            onFocus={this.handleFocus}\\n            onBlur={this.handleMinuteBlur}\\n            size=\\\"2\\\"\\n            pattern=\\\"\\\\d*\\\"\\n            disabled={disabled}\\n          />\\n          <label htmlFor={instanceMinuteAttrs.id} className={cx('mobile-input-label')}>\\n            {intl.formatMessage({ id: 'Terra.timeInput.minutes' })}\\n          </label>\\n        </div>\\n        {showSeconds && (\\n          <React.Fragment>\\n            <span className={cx('time-spacer')}>:</span>\\n            <div className={cx('time-input-group')}>\\n              <Input\\n                {...inputAttributes}\\n                {...instanceSecondAttrs}\\n                refCallback={(inputRef) => { this.secondInput = inputRef; }}\\n                className={cx('time-input-second')}\\n                value={this.state.second}\\n                name={'terra-time-second-'.concat(name)}\\n                placeholder={intl.formatMessage({ id: 'Terra.timeInput.ss' })}\\n                maxLength=\\\"2\\\"\\n                onChange={this.handleSecondChange}\\n                onKeyDown={this.handleSecondInputKeyDown}\\n                onFocus={this.handleFocus}\\n                onBlur={this.handleSecondBlur}\\n                size=\\\"2\\\"\\n                pattern=\\\"\\\\d*\\\"\\n                disabled={disabled}\\n              />\\n              <label htmlFor={instanceSecondAttrs.id} className={cx('mobile-input-label')}>\\n                {intl.formatMessage({ id: 'Terra.timeInput.seconds' })}\\n              </label>\\n            </div>\\n          </React.Fragment>\\n        )}\\n        {variantFromLocale === TimeUtil.FORMAT_12_HOUR && (\\n          <ButtonGroup selectedKeys={[this.state.meridiem]} onChange={this.handleMeridiemButtonChange} className={cx('meridiem-button-group')}>\\n            <ButtonGroup.Button\\n              key={this.anteMeridiem}\\n              className={cx('meridiem-button')}\\n              text={this.anteMeridiem}\\n              onBlur={this.handleMeridiemBlur}\\n              onFocus={this.handleFocus}\\n              isDisabled={disabled}\\n            />\\n            <ButtonGroup.Button\\n              key={this.postMeridiem}\\n              className={cx('meridiem-button')}\\n              text={this.postMeridiem}\\n              onBlur={this.handleMeridiemBlur}\\n              onFocus={this.handleFocus}\\n              isDisabled={disabled}\\n            />\\n          </ButtonGroup>\\n        )}\\n      </div>\\n    );\\n  }\\n\\n  handleMeridiemButtonChange(event, selectedKey) {\\n    this.handleValueChange(event, TimeUtil.inputType.HOUR, this.state.hour.toString(), selectedKey);\\n  }\\n\\n  desktopInput() {\\n    const {\\n      disabled,\\n      inputAttributes,\\n      minuteAttributes,\\n      hourAttributes,\\n      intl,\\n      onBlur,\\n      onChange,\\n      onFocus,\\n      name,\\n      refCallback,\\n      secondAttributes,\\n      showSeconds,\\n      value,\\n      variant,\\n      ...customProps\\n    } = this.props;\\n\\n    const variantFromLocale = TimeUtil.getVariantFromLocale(this.props);\\n    const timeInputClassNames = cx([\\n      { disabled },\\n      'time-input',\\n      { 'is-focused': this.state.isFocused },\\n      customProps.className,\\n    ]);\\n\\n    // Using the state of hour and minute create a time in UTC represented in ISO 8601 format.\\n    let timeValue = '';\\n\\n    if (this.state.hour.length > 0 || this.state.minute.length > 0 || (this.state.second.length > 0 && showSeconds)) {\\n      let hour = parseInt(this.state.hour, 10);\\n\\n      if (variantFromLocale === TimeUtil.FORMAT_12_HOUR && this.state.meridiem === this.postMeridiem) {\\n        hour += 12;\\n      }\\n\\n      timeValue = 'T'.concat(hour, ':', this.state.minute);\\n\\n      if (showSeconds) {\\n        timeValue = timeValue.concat(':', this.state.second);\\n      }\\n    }\\n\\n    /* eslint-disable jsx-a11y/no-static-element-interactions */\\n    return (\\n      <div\\n        {...customProps}\\n        className={timeInputClassNames}\\n        ref={this.timeInputContainer}\\n      >\\n        <input\\n          // Create a hidden input for storing the name and value attributes to use when submitting the form.\\n          // The data stored in the value attribute will be the visible date in the date input but in ISO 8601 format.\\n          type=\\\"hidden\\\"\\n          name={name}\\n          value={timeValue}\\n        />\\n        <Input\\n          {...inputAttributes}\\n          {...minuteAttributes}\\n          aria-label={intl.formatMessage({ id: 'Terra.timeInput.hours' })}\\n          refCallback={(inputRef) => {\\n            this.hourInput = inputRef;\\n            if (refCallback) refCallback(inputRef);\\n          }}\\n          className={cx('time-input-hour', 'desktop', { 'initial-focus': this.state.hourInitialFocused })}\\n          type=\\\"text\\\"\\n          value={this.state.hour}\\n          name={'terra-time-hour-'.concat(name)}\\n          placeholder={intl.formatMessage({ id: 'Terra.timeInput.hh' })}\\n          maxLength=\\\"2\\\"\\n          onChange={this.handleHourChange}\\n          onKeyDown={this.handleHourInputKeyDown}\\n          onFocus={this.handleHourFocus}\\n          onBlur={this.handleHourBlur}\\n          size=\\\"2\\\"\\n          pattern=\\\"\\\\d*\\\"\\n          disabled={disabled}\\n        />\\n        <span className={cx('time-spacer')}>:</span>\\n        <Input\\n          {...inputAttributes}\\n          {...minuteAttributes}\\n          refCallback={(inputRef) => { this.minuteInput = inputRef; }}\\n          aria-label={intl.formatMessage({ id: 'Terra.timeInput.minutes' })}\\n          className={cx('time-input-minute', showSeconds ? 'with-second' : 'without-second', 'desktop', { 'initial-focus': this.state.minuteInitialFocused })}\\n          type=\\\"text\\\"\\n          value={this.state.minute}\\n          name={'terra-time-minute-'.concat(name)}\\n          placeholder={intl.formatMessage({ id: 'Terra.timeInput.mm' })}\\n          maxLength=\\\"2\\\"\\n          onChange={this.handleMinuteChange}\\n          onKeyDown={this.handleMinuteInputKeyDown}\\n          onFocus={this.handleMinuteFocus}\\n          onBlur={this.handleMinuteBlur}\\n          size=\\\"2\\\"\\n          pattern=\\\"\\\\d*\\\"\\n          disabled={disabled}\\n        />\\n        {showSeconds && (\\n          <React.Fragment>\\n            <span className={cx('time-spacer')}>:</span>\\n            <Input\\n              {...inputAttributes}\\n              {...secondAttributes}\\n              refCallback={(inputRef) => { this.secondInput = inputRef; }}\\n              aria-label={intl.formatMessage({ id: 'Terra.timeInput.seconds' })}\\n              className={cx('time-input-second', 'desktop', { 'initial-focus': this.state.secondInitialFocused })}\\n              type=\\\"text\\\"\\n              value={this.state.second}\\n              name={'terra-time-second-'.concat(name)}\\n              placeholder={intl.formatMessage({ id: 'Terra.timeInput.ss' })}\\n              maxLength=\\\"2\\\"\\n              onChange={this.handleSecondChange}\\n              onKeyDown={this.handleSecondInputKeyDown}\\n              onFocus={this.handleSecondFocus}\\n              onBlur={this.handleSecondBlur}\\n              size=\\\"2\\\"\\n              pattern=\\\"\\\\d*\\\"\\n              disabled={disabled}\\n            />\\n          </React.Fragment>\\n        )}\\n        {variantFromLocale === TimeUtil.FORMAT_12_HOUR && (\\n          [\\n            <Input\\n              {...inputAttributes}\\n              aria-label={intl.formatMessage({ id: 'Terra.timeInput.display.meridiem' })} // value in translations set to 'Display Meridiem'\\n              aria-readonly\\n              className={cx(['meridiem-display', { focused: this.state.meridiemFocused }])}\\n              onFocus={this.handleMeridiemInputFocus}\\n              key=\\\"meridiem_display\\\"\\n              tabIndex=\\\"-1\\\"\\n              value={this.state.meridiem}\\n              size={this.state.meridiem.length || 1}\\n              readOnly\\n              disabled={disabled}\\n            />,\\n            <div\\n              className={cx('meridiem-select-wrapper')}\\n              key=\\\"meridiem_select_box\\\"\\n            >\\n              <select\\n                aria-label={intl.formatMessage({ id: 'Terra.timeInput.select.meridiem' })} // value in translations set to 'Select Meridiem'\\n                ref={(select) => { this.meridiemSelect = select; }}\\n                onBlur={this.handleMeridiemBlur}\\n                onFocus={this.handleMeridiemSelectFocus}\\n                name={'terra-time-meridiem-'.concat(name)}\\n                value={this.state.meridiem}\\n                className={cx('time-input-meridiem')}\\n                onChange={this.handleMeridiemChange}\\n                onKeyDown={this.handleMeridiemInputKeyDown}\\n                size=\\\"2\\\"\\n              >\\n                <option key=\\\"anteMeridiem\\\" value={this.anteMeridiem}>{this.anteMeridiem}</option>\\n                <option key=\\\"postMeridiem\\\" value={this.postMeridiem}>{this.postMeridiem}</option>\\n              </select>\\n            </div>,\\n          ]\\n        )}\\n      </div>\\n    );\\n    /* eslint-enable jsx-a11y/no-static-element-interactions */\\n  }\\n\\n  render() {\\n    if (TimeUtil.isConsideredMobileDevice()) {\\n      return this.mobileInput();\\n    }\\n\\n    return this.desktopInput();\\n  }\\n}\\n\\nTimeInput.propTypes = propTypes;\\nTimeInput.defaultProps = defaultProps;\\n\\nexport default injectIntl(TimeInput);\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraTimeInput = _interopRequireDefault(require(\"terra-time-input\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: '12:12'\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_terraTimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '12:12' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\nTime Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TimeInput = _interopRequireDefault(require(\"terra-time-input/lib/TimeInput\"));\n\nvar _TimeUtil = _interopRequireDefault(require(\"terra-time-input/lib/TimeUtil\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: '21:24'\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_TimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange,\n        variant: _TimeUtil.default.FORMAT_12_HOUR\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input/lib/TimeInput';\\nimport TimeUtil from 'terra-time-input/lib/TimeUtil';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '21:24' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\n          Time Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n          variant={TimeUtil.FORMAT_12_HOUR}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraTimeInput = _interopRequireDefault(require(\"terra-time-input\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: ''\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_terraTimeInput.default, {\n        name: \"time-input-default\",\n        onChange: this.handleTimeChange\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\nTime Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-default\\\"\\n          onChange={this.handleTimeChange}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TimeInput = _interopRequireDefault(require(\"terra-time-input/lib/TimeInput\"));\n\nvar _TimeUtil = _interopRequireDefault(require(\"terra-time-input/lib/TimeUtil\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: ''\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_TimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange,\n        variant: _TimeUtil.default.FORMAT_12_HOUR\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input/lib/TimeInput';\\nimport TimeUtil from 'terra-time-input/lib/TimeUtil';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\n          Time Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n          variant={TimeUtil.FORMAT_12_HOUR}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraTimeInput = _interopRequireDefault(require(\"terra-time-input\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: ''\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_terraTimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange,\n        showSeconds: true\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\n          Time Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n          showSeconds\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraTimeInput = _interopRequireDefault(require(\"terra-time-input\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: '12:37:14'\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_terraTimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange,\n        showSeconds: true\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '12:37:14' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\n          Time Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n          showSeconds\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TimeInput = _interopRequireDefault(require(\"terra-time-input/lib/TimeInput\"));\n\nvar _TimeUtil = _interopRequireDefault(require(\"terra-time-input/lib/TimeUtil\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _TimeInputDocCommonModule = _interopRequireDefault(require(\"./TimeInputDocCommon.module.scss\"));\n\nvar cx = _bind.default.bind(_TimeInputDocCommonModule.default);\n\nvar timeInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(timeInput, _React$Component);\n\n  function timeInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, timeInput);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(timeInput).call(this, props));\n    _this.state = {\n      time: ''\n    };\n    _this.handleTimeChange = _this.handleTimeChange.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(timeInput, [{\n    key: \"handleTimeChange\",\n    value: function handleTimeChange(event, time) {\n      this.setState({\n        time: time\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Time Provided:\", _react.default.createElement(\"span\", {\n        className: cx('time-wrapper')\n      }, this.state.time)), _react.default.createElement(_TimeInput.default, {\n        name: \"time-input-value\",\n        value: this.state.time,\n        onChange: this.handleTimeChange,\n        showSeconds: true,\n        variant: _TimeUtil.default.FORMAT_12_HOUR\n      }));\n    }\n  }]);\n  return timeInput;\n}(_react.default.Component);\n\nvar _default = timeInput;\nexports.default = _default;","export default \"import React from 'react';\\nimport TimeInput from 'terra-time-input/lib/TimeInput';\\nimport TimeUtil from 'terra-time-input/lib/TimeUtil';\\nimport classNames from 'classnames/bind';\\nimport styles from './TimeInputDocCommon.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass timeInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { time: '' };\\n    this.handleTimeChange = this.handleTimeChange.bind(this);\\n  }\\n\\n  handleTimeChange(event, time) {\\n    this.setState({ time });\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <p>\\n          Time Provided:\\n          <span className={cx('time-wrapper')}>{this.state.time}</span>\\n        </p>\\n        <TimeInput\\n          name=\\\"time-input-value\\\"\\n          value={this.state.time}\\n          onChange={this.handleTimeChange}\\n          showSeconds\\n          variant={TimeUtil.FORMAT_12_HOUR}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default timeInput;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _TimeInput = _interopRequireDefault(require(\"!raw-loader!../../../../src/TimeInput\"));\n\nvar _TimeInputDefaultTime = _interopRequireDefault(require(\"../example/TimeInputDefaultTime\"));\n\nvar _TimeInputDefaultTime2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputDefaultTime\"));\n\nvar _TimeInputDefaultTwelveHour = _interopRequireDefault(require(\"../example/TimeInputDefaultTwelveHour\"));\n\nvar _TimeInputDefaultTwelveHour2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputDefaultTwelveHour\"));\n\nvar _TimeInputNoDefaultTime = _interopRequireDefault(require(\"../example/TimeInputNoDefaultTime\"));\n\nvar _TimeInputNoDefaultTime2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputNoDefaultTime\"));\n\nvar _TimeInputNoDefaultTwelveHour = _interopRequireDefault(require(\"../example/TimeInputNoDefaultTwelveHour\"));\n\nvar _TimeInputNoDefaultTwelveHour2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputNoDefaultTwelveHour\"));\n\nvar _TimeInputSeconds = _interopRequireDefault(require(\"../example/TimeInputSeconds\"));\n\nvar _TimeInputSeconds2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputSeconds\"));\n\nvar _TimeInputSecondsWithDefault = _interopRequireDefault(require(\"../example/TimeInputSecondsWithDefault\"));\n\nvar _TimeInputSecondsWithDefault2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputSecondsWithDefault\"));\n\nvar _TimeInputSecondsTwelveHour = _interopRequireDefault(require(\"../example/TimeInputSecondsTwelveHour\"));\n\nvar _TimeInputSecondsTwelveHour2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/TimeInputSecondsTwelveHour\"));\n\n// Component Source\n// Example Files\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _README.default,\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'Without Default Time',\n      example: _react.default.createElement(_TimeInputNoDefaultTime.default, null),\n      source: _TimeInputNoDefaultTime2.default\n    }, {\n      title: 'With Default Time',\n      example: _react.default.createElement(_TimeInputDefaultTime.default, null),\n      source: _TimeInputDefaultTime2.default\n    }, {\n      title: 'Without Default Time - 12 Hour',\n      example: _react.default.createElement(_TimeInputNoDefaultTwelveHour.default, null),\n      source: _TimeInputNoDefaultTwelveHour2.default\n    }, {\n      title: 'With Default Time - 12 Hour',\n      example: _react.default.createElement(_TimeInputDefaultTwelveHour.default, null),\n      source: _TimeInputDefaultTwelveHour2.default\n    }, {\n      title: 'Seconds Displayed Without Default Time',\n      example: _react.default.createElement(_TimeInputSeconds.default, null),\n      source: _TimeInputSeconds2.default\n    }, {\n      title: 'Seconds Displayed With Default Time',\n      example: _react.default.createElement(_TimeInputSecondsWithDefault.default, null),\n      source: _TimeInputSecondsWithDefault2.default\n    }, {\n      title: 'Seconds Displayed Without Default Time - 12 Hour',\n      example: _react.default.createElement(_TimeInputSecondsTwelveHour.default, null),\n      source: _TimeInputSecondsTwelveHour2.default\n    }],\n    propsTables: [{\n      componentName: 'Time Input',\n      componentSrc: _TimeInput.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;"],"sourceRoot":""}