{"version":3,"sources":["webpack:///./packages/terra-slide-panel-manager/lib/SlidePanelManager.js","webpack:///./packages/terra-slide-panel-manager/docs/README.md","webpack:///./packages/terra-slide-panel-manager/src/SlidePanelManager.jsx","webpack:///./packages/terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManagerExample.js","webpack:///./packages/terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss?6447","webpack:///./packages/terra-slide-panel-manager/src/terra-dev-site/doc/example/SlidePanelManagerExample.jsx","webpack:///./packages/terra-slide-panel-manager/lib/terra-dev-site/doc/slide-panel-manager/SlidePanelManager.1.doc.js","webpack:///./packages/terra-slide-panel/lib/SlidePanel.js","webpack:///./packages/terra-slide-panel/lib/SlidePanel.module.scss?446d"],"names":["_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","disclosureType","_disclosureSizeToPane","_extends2","_objectWithoutProperties2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_defineProperty2","_react","_propTypes","_terraActionHeader","_terraContentContainer","_terraDisclosureManager","_terraSlideGroup","_terraSlidePanel","propTypes","children","node","panelBehavior","oneOf","disclosureAccessory","element","disclosureSizeToPanelSize","availableDisclosureSizes","TINY","SMALL","MEDIUM","LARGE","HUGE","SlidePanelManager","_React$Component","props","_this","this","call","renderSlidePanel","bind","key","manager","isFullscreen","panelSize","dimensions","_this$props","customProps","disclosure","size","FULLSCREEN","isMaximized","width","height","presentedDisclosureComponentKey","disclosureComponentKeys","length","headerDataForPresentedComponent","disclosureComponentData","headerAdapterData","createElement","fill","isOpen","panelContent","header","Fragment","title","onClose","closeDisclosure","onBack","dismissPresentedComponent","undefined","onMaximize","maximizeDisclosure","onMinimize","minimizeDisclosure","collapsibleMenuView","items","components","isAnimated","mainContent","supportedDisclosureTypes","render","Component","defaultProps","_default","_bind","_terraCollapsibleMenuView","_terraSlidePanelManager","_SlidePanelManagerModule","cx","DisclosureComponent","checkLockState","state","text","disclosureManager","context","registerDismissCheck","_this2","Promise","resolve","reject","confirm","concat","name","_this3","DisclosureManagerHeaderAdapter","Item","onClick","setState","selectedHeaderAction","className","type","dismiss","catch","console","log","disclose","preferredType","content","component","onChange","event","target","contextType","DisclosureManagerContext","string","HEIGHT_KEYS","keys","availableDisclosureHeights","WIDTH_KEYS","availableDisclosureWidths","generateDimensionOptions","values","map","currentValue","index","keyValue","ContentComponent","_React$Component2","_this4","renderButton","handleSelectChange","getId","id","disclosureHeight","disclosureWidth","_this5","htmlFor","renderForm","renderFormButton","SlidePanelManagerExample","_ref","behavior","showAccessory","bool","module","_terraDocTemplate","_package","_README","_SlidePanelManager","_SlidePanelManagerExample","_SlidePanelManagerExample2","packageName","readme","srcPath","examples","example","source","propsTables","componentSrc","SlidePanelPositions","_SlidePanelModule","START","END","panelPosition","SlidePanel","setPanelNode","mainNode","createRef","prevProps","panelNode","focus","current","slidePanelClassNames","panelDiv","tabIndex","ref","mainDiv"],"mappings":"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","file":"104-de45cbe9ef58be3d31d9.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.disclosureType = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _terraActionHeader = _interopRequireDefault(require(\"terra-action-header\"));\n\nvar _terraContentContainer = _interopRequireDefault(require(\"terra-content-container\"));\n\nvar _terraDisclosureManager = _interopRequireWildcard(require(\"terra-disclosure-manager\"));\n\nvar _terraSlideGroup = _interopRequireDefault(require(\"terra-slide-group\"));\n\nvar _terraSlidePanel = _interopRequireDefault(require(\"terra-slide-panel\"));\n\nvar _disclosureSizeToPane;\n\nvar disclosureType = 'panel';\nexports.disclosureType = disclosureType;\nvar propTypes = {\n  /**\n   * The components to be rendered in the body of the SlidePanelManager. These components will receive the\n   * disclosure capabilities through the DisclosureManger's context API.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * The desired panel behavior. Either 'squish' or 'overlay'.\n   */\n  panelBehavior: _propTypes.default.oneOf(['overlay', 'squish']),\n\n  /**\n   * The component to render within the panel above the disclosed content.\n   */\n  disclosureAccessory: _propTypes.default.element\n};\nvar defaultProps = {\n  panelBehavior: 'overlay'\n};\n/**\n * The SlidePanel component does not support the full range of DisclosureManager sizes in its API. The potential sizes are mapped to the\n * SlidePanel's supported sizes.\n */\n\nvar disclosureSizeToPanelSize = (_disclosureSizeToPane = {}, (0, _defineProperty2.default)(_disclosureSizeToPane, _terraDisclosureManager.availableDisclosureSizes.TINY, 'small'), (0, _defineProperty2.default)(_disclosureSizeToPane, _terraDisclosureManager.availableDisclosureSizes.SMALL, 'small'), (0, _defineProperty2.default)(_disclosureSizeToPane, _terraDisclosureManager.availableDisclosureSizes.MEDIUM, 'large'), (0, _defineProperty2.default)(_disclosureSizeToPane, _terraDisclosureManager.availableDisclosureSizes.LARGE, 'large'), (0, _defineProperty2.default)(_disclosureSizeToPane, _terraDisclosureManager.availableDisclosureSizes.HUGE, 'large'), _disclosureSizeToPane);\n\nvar disclosureDimensionsToPanelSize = function disclosureDimensionsToPanelSize(dimensions) {\n  if (dimensions.width > 480 || dimensions.height > 600) {\n    return 'large';\n  }\n\n  return 'small';\n};\n\nvar SlidePanelManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SlidePanelManager, _React$Component);\n\n  function SlidePanelManager(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SlidePanelManager);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SlidePanelManager).call(this, props));\n    _this.renderSlidePanel = _this.renderSlidePanel.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(SlidePanelManager, [{\n    key: \"renderSlidePanel\",\n    value: function renderSlidePanel(manager) {\n      var _this$props = this.props,\n          children = _this$props.children,\n          panelBehavior = _this$props.panelBehavior,\n          disclosureAccessory = _this$props.disclosureAccessory,\n          customProps = (0, _objectWithoutProperties2.default)(_this$props, [\"children\", \"panelBehavior\", \"disclosureAccessory\"]);\n      var isFullscreen;\n\n      if (manager.disclosure.size === _terraDisclosureManager.availableDisclosureSizes.FULLSCREEN || manager.disclosure.isMaximized) {\n        isFullscreen = true;\n      }\n\n      var panelSize;\n\n      if (manager.disclosure.dimensions) {\n        panelSize = disclosureDimensionsToPanelSize(manager.disclosure.dimensions);\n      } else {\n        panelSize = disclosureSizeToPanelSize[manager.disclosure.size];\n      }\n\n      var presentedDisclosureComponentKey = manager.disclosureComponentKeys[manager.disclosureComponentKeys.length - 1];\n      var presentedDisclosureComponentData = manager.disclosureComponentData[presentedDisclosureComponentKey] || {};\n      var headerDataForPresentedComponent = presentedDisclosureComponentData.headerAdapterData;\n      return _react.default.createElement(_terraSlidePanel.default, (0, _extends2.default)({}, customProps, {\n        fill: true,\n        panelBehavior: panelBehavior,\n        isFullscreen: isFullscreen,\n        panelSize: panelSize,\n        isOpen: manager.disclosure.isOpen,\n        panelContent: _react.default.createElement(_terraContentContainer.default, {\n          fill: true,\n          header: _react.default.createElement(_react.default.Fragment, null, headerDataForPresentedComponent ? _react.default.createElement(_terraActionHeader.default, {\n            title: headerDataForPresentedComponent.title,\n            onClose: manager.closeDisclosure,\n            onBack: manager.disclosureComponentKeys.length > 1 ? manager.dismissPresentedComponent : undefined,\n            onMaximize: manager.maximizeDisclosure,\n            onMinimize: manager.minimizeDisclosure\n          }, headerDataForPresentedComponent.collapsibleMenuView) : undefined, disclosureAccessory)\n        }, _react.default.createElement(_terraSlideGroup.default, {\n          items: manager.disclosure.components,\n          isAnimated: true\n        })),\n        mainContent: manager.children.components\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return _react.default.createElement(_terraDisclosureManager.default, {\n        supportedDisclosureTypes: [disclosureType],\n        render: this.renderSlidePanel\n      }, children);\n    }\n  }]);\n  return SlidePanelManager;\n}(_react.default.Component);\n\nSlidePanelManager.propTypes = propTypes;\nSlidePanelManager.defaultProps = defaultProps;\nvar _default = SlidePanelManager;\nexports.default = _default;","export default \"# Terra SlidePanel Manager\\n\\nThe SlidePanelManager is a DisclosureManager implementation that presents disclosed content using a SlidePanel.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n  - `npm install terra-slide-panel-manager`\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n## Peer Dependencies\\n\\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\\n\\n| Peer Dependency | Version |\\n|-|-|\\n| react | ^16.8.5 |\\n| react-dom | ^16.8.5 |\\n| terra-disclosure-manager | ^4.16.0 |\\n\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Usage\\n\\n### Implementation Requirements\\n\\nThe SlidePanelManager utilizes the DisclosureManager API to manage disclosure requests. The components provided as children to the SlidePanelManager, and the components disclosed within it, must interface with the SlidePanelManager's context using the `withDisclosureManager()` higher-order component generator provided by the `terra-disclosure-manager` package. Alternatively, `DisclosureManagerContext` can be consumed directly using the `useContext` hook.\\n\\nThe SlidePanelManager responds to `\\\"panel\\\"` disclosure type requests. Components that wish to disclose content using the SlidePanelManager should provide a preferred type of `\\\"panel\\\"`. This value is exported from the package as `disclosureType`. Please see the [DisclosureManager documentation](https://engineering.cerner.com/terra-ui/#/components/terra-disclosure-manager/disclosure-manager/about) for a full description of the SlidePanelManager's capabilities.\\n\\n### DisclosureManagerHeaderAdapter Support\\n\\nIf a component disclosed by the SlidePanelManager renders a `DisclosureManagerHeaderAdapter`, the SlidePanelManager will render an ActionHeader and provide the standard disclosure navigation controls (close, go back, maximize/minimize, etc.) within it. The disclosed component can use the `DisclosureManagerHeaderAdapter` to inject its own title and CollapsibleButtonView into the ActionHeader.\\n\\nIf the disclosed component does **not** render a `DisclosureManagerHeaderAdapter`, the SlidePanelManager will **not** render an ActionHeader itself. In this case, it is assumed that the disclosed component is rendering its own header. The disclosed component is responsible for rendering the appropriate controls to navigate the disclosure stack.\\n\\n> Note: The DisclosureManagerHeaderAdapter is the preferred way to present a header within the SlidePanelManager. In a future major release, the SlidePanelManager will **always** render the header and navigation controls, regardless of the presence of a DisclosureManagerHeaderAdapter.\\n\\n### Disclosure Accessory\\n\\nThe `disclosureAccessory` prop allows consumers of the SlidePanelManager to render a static component above the disclosed panel content. The provided component will be rendered below the standard ActionHeader and above the disclosed content. This can be used to easily provide additional context to every disclosed component. This component is provided once to the SlidePanelManager instance, not on a per-disclosure basis, and each component in the disclosure stack will be decorated with the same accessory component.\\n\\n### Example\\n\\n```jsx\\nimport React from 'react';\\nimport Button from 'terra-button';\\nimport SlidePanelManager, { disclosureType } from 'terra-slide-panel-manager';\\nimport { withDisclosureManager, DisclosureManagerContext, DisclosureManagerHeaderAdapter } from 'terra-disclosure-manager';\\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\\n\\nconst PanelComponentB = () => (\\n  <React.Fragment>\\n    <DisclosureManagerHeaderAdapter\\n      title=\\\"Panel Component B\\\"\\n    />\\n    <p>I am PanelComponentB!</p>\\n  </React.Fragment>\\n);\\n\\nconst PanelComponentA = () => {\\n  const disclosureManager = React.useContext(DisclosureManagerContext);\\n\\n  return (\\n    <div>\\n      <DisclosureManagerHeaderAdapter\\n        title=\\\"Panel Component A\\\"\\n        collapsibleMenuView={<CollapsibleMenuView />}\\n      />\\n      <p>I am PanelComponentA!</p>\\n      <Button\\n        text=\\\"Disclose PanelComponentB\\\"\\n        onClick={() => {\\n          disclosureManager.disclose({\\n            preferredType: 'panel',\\n            size: 'large',\\n            content: {\\n              key: 'panel-component-b-instance',\\n              component: <PanelComponentB />\\n            }\\n          });\\n        }}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst MyContentComponent = withDisclosureManager(({ disclosureManager }) => (\\n  <div>\\n    <p>I am MyContentComponent!</p>\\n    <Button\\n      text=\\\"Disclose PanelComponentA\\\"\\n      onClick={() => {\\n        disclosureManager.disclose({\\n          preferredType: 'panel',\\n          size: 'large',\\n          content: {\\n            key: 'panel-component-a-instance',\\n            component: <PanelComponentA />\\n          }\\n        });\\n      }}\\n    />\\n  </div>\\n));\\n\\nMyContentComponent.propTypes = {\\n  disclosureManager: disclosureManagerShape,\\n}\\n\\nlet MySlidePanelManagerComponent = () => (\\n  <SlidePanelManager\\n    disclosureAccessory={<div>Disclosure Accessory</div>}\\n  >\\n    <MyContentComponent />\\n  </SlidePanelManager>\\n);\\n```\\n\\n## Component Features\\n\\n- [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n- [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n- [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ActionHeader from 'terra-action-header';\\nimport ContentContainer from 'terra-content-container';\\nimport DisclosureManager, { availableDisclosureSizes } from 'terra-disclosure-manager';\\nimport SlideGroup from 'terra-slide-group';\\nimport SlidePanel from 'terra-slide-panel';\\n\\nconst disclosureType = 'panel';\\nexport { disclosureType };\\n\\nconst propTypes = {\\n  /**\\n   * The components to be rendered in the body of the SlidePanelManager. These components will receive the\\n   * disclosure capabilities through the DisclosureManger's context API.\\n   */\\n  children: PropTypes.node,\\n  /**\\n   * The desired panel behavior. Either 'squish' or 'overlay'.\\n   */\\n  panelBehavior: PropTypes.oneOf(['overlay', 'squish']),\\n  /**\\n   * The component to render within the panel above the disclosed content.\\n   */\\n  disclosureAccessory: PropTypes.element,\\n};\\n\\nconst defaultProps = {\\n  panelBehavior: 'overlay',\\n};\\n\\n/**\\n * The SlidePanel component does not support the full range of DisclosureManager sizes in its API. The potential sizes are mapped to the\\n * SlidePanel's supported sizes.\\n */\\nconst disclosureSizeToPanelSize = {\\n  [availableDisclosureSizes.TINY]: 'small',\\n  [availableDisclosureSizes.SMALL]: 'small',\\n  [availableDisclosureSizes.MEDIUM]: 'large',\\n  [availableDisclosureSizes.LARGE]: 'large',\\n  [availableDisclosureSizes.HUGE]: 'large',\\n};\\n\\nconst disclosureDimensionsToPanelSize = (dimensions) => {\\n  if (dimensions.width > 480 || dimensions.height > 600) {\\n    return 'large';\\n  }\\n  return 'small';\\n};\\n\\nclass SlidePanelManager extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.renderSlidePanel = this.renderSlidePanel.bind(this);\\n  }\\n\\n  renderSlidePanel(manager) {\\n    const {\\n      children, panelBehavior, disclosureAccessory, ...customProps\\n    } = this.props;\\n\\n    let isFullscreen;\\n    if (manager.disclosure.size === availableDisclosureSizes.FULLSCREEN || manager.disclosure.isMaximized) {\\n      isFullscreen = true;\\n    }\\n\\n    let panelSize;\\n    if (manager.disclosure.dimensions) {\\n      panelSize = disclosureDimensionsToPanelSize(manager.disclosure.dimensions);\\n    } else {\\n      panelSize = disclosureSizeToPanelSize[manager.disclosure.size];\\n    }\\n\\n    const presentedDisclosureComponentKey = manager.disclosureComponentKeys[manager.disclosureComponentKeys.length - 1];\\n    const presentedDisclosureComponentData = manager.disclosureComponentData[presentedDisclosureComponentKey] || {};\\n    const headerDataForPresentedComponent = presentedDisclosureComponentData.headerAdapterData;\\n\\n    return (\\n      <SlidePanel\\n        {...customProps}\\n        fill\\n        panelBehavior={panelBehavior}\\n        isFullscreen={isFullscreen}\\n        panelSize={panelSize}\\n        isOpen={manager.disclosure.isOpen}\\n        panelContent={(\\n          <ContentContainer\\n            fill\\n            header={(\\n              <React.Fragment>\\n                {headerDataForPresentedComponent ? (\\n                  <ActionHeader\\n                    title={headerDataForPresentedComponent.title}\\n                    onClose={manager.closeDisclosure}\\n                    onBack={manager.disclosureComponentKeys.length > 1 ? manager.dismissPresentedComponent : undefined}\\n                    onMaximize={manager.maximizeDisclosure}\\n                    onMinimize={manager.minimizeDisclosure}\\n                  >\\n                    {headerDataForPresentedComponent.collapsibleMenuView}\\n                  </ActionHeader>\\n                ) : undefined}\\n                {disclosureAccessory}\\n              </React.Fragment>\\n          )}\\n          >\\n            <SlideGroup items={manager.disclosure.components} isAnimated />\\n          </ContentContainer>\\n        )}\\n        mainContent={manager.children.components}\\n      />\\n    );\\n  }\\n\\n  render() {\\n    const { children } = this.props;\\n\\n    return (\\n      <DisclosureManager\\n        supportedDisclosureTypes={[disclosureType]}\\n        render={this.renderSlidePanel}\\n      >\\n        {children}\\n      </DisclosureManager>\\n    );\\n  }\\n}\\n\\nSlidePanelManager.propTypes = propTypes;\\nSlidePanelManager.defaultProps = defaultProps;\\n\\nexport default SlidePanelManager;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _terraActionHeader = _interopRequireDefault(require(\"terra-action-header\"));\n\nvar _terraCollapsibleMenuView = _interopRequireDefault(require(\"terra-collapsible-menu-view\"));\n\nvar _terraContentContainer = _interopRequireDefault(require(\"terra-content-container\"));\n\nvar _terraDisclosureManager = require(\"terra-disclosure-manager\");\n\nvar _terraSlidePanelManager = _interopRequireDefault(require(\"terra-slide-panel-manager\"));\n\nvar _SlidePanelManagerModule = _interopRequireDefault(require(\"terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss\"));\n\n/* eslint-disable max-classes-per-file */\nvar cx = _bind.default.bind(_SlidePanelManagerModule.default);\n\nvar DisclosureComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(DisclosureComponent, _React$Component);\n\n  function DisclosureComponent(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DisclosureComponent);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DisclosureComponent).call(this, props));\n    _this.checkLockState = _this.checkLockState.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = {\n      text: undefined\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(DisclosureComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var disclosureManager = this.context;\n\n      if (disclosureManager && disclosureManager.registerDismissCheck) {\n        disclosureManager.registerDismissCheck(this.checkLockState);\n      }\n    }\n  }, {\n    key: \"checkLockState\",\n    value: function checkLockState() {\n      var _this2 = this;\n\n      if (this.state.text && this.state.text.length) {\n        return new Promise(function (resolve, reject) {\n          // eslint-disable-next-line no-restricted-globals\n          if (!confirm(\"\".concat(_this2.props.name, \" has unsaved changes that will be lost. Do you wish to continue?\"))) {\n            // eslint-disable-line no-alert\n            reject();\n            return;\n          }\n\n          resolve();\n        });\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          name = _this$props.name,\n          disclosureType = _this$props.disclosureType;\n      var disclosureManager = this.context;\n      return _react.default.createElement(_terraContentContainer.default, {\n        fill: true\n      }, _react.default.createElement(_terraDisclosureManager.DisclosureManagerHeaderAdapter, {\n        title: name,\n        collapsibleMenuView: _react.default.createElement(_terraCollapsibleMenuView.default, null, _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Button 1\",\n          key: \"button_1\",\n          onClick: function onClick() {\n            _this3.setState({\n              selectedHeaderAction: 'Button 1'\n            });\n          }\n        }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Button 2\",\n          key: \"button_2\",\n          onClick: function onClick() {\n            _this3.setState({\n              selectedHeaderAction: 'Button 2'\n            });\n          }\n        }))\n      }), _react.default.createElement(\"div\", {\n        className: cx('content-wrapper')\n      }, _react.default.createElement(\"h3\", null, name), _react.default.createElement(\"p\", null, \"The disclosed component can disclose content within the same panel.\"), _react.default.createElement(\"p\", null, \"It can also render a header (like above) that implements the various DisclosureManager control functions.\"), _react.default.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          disclosureManager.dismiss().catch(function () {\n            console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\n          });\n        }\n      }, \"Dismiss\"), _react.default.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          disclosureManager.disclose({\n            preferredType: disclosureType,\n            size: 'small',\n            content: {\n              key: \"Nested \".concat(name),\n              component: _react.default.createElement(DisclosureComponent, {\n                name: \"Nested \".concat(name),\n                disclosureType: disclosureType\n              })\n            }\n          });\n        }\n      }, \"Disclose Again\"), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(\"p\", null, \"The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.\"), _react.default.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(event) {\n          _this3.setState({\n            text: event.target.value\n          });\n        },\n        value: this.state.text || ''\n      }), this.state.text && this.state.text.length ? _react.default.createElement(\"p\", null, \"Component has unsaved changes!\") : null, _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(\"p\", null, \"Selected Header Action:\", ' ', _react.default.createElement(\"b\", null, this.state.selectedHeaderAction))));\n    }\n  }]);\n  return DisclosureComponent;\n}(_react.default.Component);\n\nDisclosureComponent.contextType = _terraDisclosureManager.DisclosureManagerContext;\nDisclosureComponent.propTypes = {\n  name: _propTypes.default.string,\n  disclosureType: _propTypes.default.string\n};\nDisclosureComponent.defaultProps = {\n  name: 'Disclosure Component'\n};\nvar HEIGHT_KEYS = Object.keys(_terraDisclosureManager.availableDisclosureHeights);\nvar WIDTH_KEYS = Object.keys(_terraDisclosureManager.availableDisclosureWidths);\n\nvar generateDimensionOptions = function generateDimensionOptions(values) {\n  return values.map(function (currentValue, index) {\n    var keyValue = index;\n    return _react.default.createElement(\"option\", {\n      key: keyValue,\n      value: currentValue\n    }, currentValue);\n  });\n};\n\nvar ContentComponent =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  (0, _inherits2.default)(ContentComponent, _React$Component2);\n\n  function ContentComponent(props) {\n    var _this4;\n\n    (0, _classCallCheck2.default)(this, ContentComponent);\n    _this4 = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ContentComponent).call(this, props));\n    _this4.renderButton = _this4.renderButton.bind((0, _assertThisInitialized2.default)(_this4));\n    _this4.handleSelectChange = _this4.handleSelectChange.bind((0, _assertThisInitialized2.default)(_this4));\n    _this4.getId = _this4.getId.bind((0, _assertThisInitialized2.default)(_this4));\n    _this4.state = {\n      id: 'dimensions',\n      disclosureHeight: HEIGHT_KEYS[0],\n      disclosureWidth: WIDTH_KEYS[0]\n    };\n    return _this4;\n  }\n\n  (0, _createClass2.default)(ContentComponent, [{\n    key: \"getId\",\n    value: function getId(name) {\n      return name + this.state.id;\n    }\n  }, {\n    key: \"handleSelectChange\",\n    value: function handleSelectChange(event) {\n      this.setState((0, _defineProperty2.default)({}, event.target.name, event.target.value));\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton(size) {\n      var disclosureType = this.props.disclosureType;\n      var disclosureManager = this.context;\n      return _react.default.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          disclosureManager.disclose({\n            preferredType: disclosureType,\n            size: size,\n            content: {\n              key: \"Content-Disclosure-\".concat(size),\n              component: _react.default.createElement(DisclosureComponent, {\n                name: \"Disclosure Component\",\n                disclosureType: disclosureType\n              })\n            }\n          });\n        }\n      }, \"Disclose (\".concat(size, \")\"));\n    }\n  }, {\n    key: \"renderFormButton\",\n    value: function renderFormButton() {\n      var _this5 = this;\n\n      var disclosureType = this.props.disclosureType;\n      var disclosureManager = this.context;\n      var name = \"Disclose (\".concat(this.state.disclosureHeight, \") x (\").concat(this.state.disclosureWidth, \")\");\n      return _react.default.createElement(\"button\", {\n        type: \"button\",\n        onClick: function onClick() {\n          disclosureManager.disclose({\n            preferredType: disclosureType,\n            dimensions: {\n              height: _this5.state.disclosureHeight,\n              width: _this5.state.disclosureWidth\n            },\n            content: {\n              key: 'Content-Disclosure-Dimensions',\n              component: _react.default.createElement(DisclosureComponent, {\n                name: \"Disclosure Component\",\n                disclosureType: disclosureType\n              })\n            }\n          });\n        }\n      }, name);\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm() {\n      return _react.default.createElement(\"form\", null, _react.default.createElement(\"label\", {\n        htmlFor: this.getId(\"disclosureHeight\".concat(this.props.panelBehavior))\n      }, \"Pop Content Height\"), _react.default.createElement(\"select\", {\n        id: this.getId(\"disclosureHeight\".concat(this.props.panelBehavior)),\n        name: \"disclosureHeight\",\n        value: this.state.disclosureHeight,\n        onChange: this.handleSelectChange\n      }, generateDimensionOptions(HEIGHT_KEYS)), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null), _react.default.createElement(\"label\", {\n        htmlFor: this.getId(\"disclosureWidth\".concat(this.props.panelBehavior))\n      }, \"Pop Content Width\"), _react.default.createElement(\"select\", {\n        id: this.getId(\"disclosureWidth\".concat(this.props.panelBehavior)),\n        name: \"disclosureWidth\",\n        value: this.state.disclosureWidth,\n        onChange: this.handleSelectChange\n      }, generateDimensionOptions(WIDTH_KEYS)), _react.default.createElement(\"br\", null), _react.default.createElement(\"br\", null));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_terraContentContainer.default, {\n        header: _react.default.createElement(_terraActionHeader.default, {\n          title: \"SlidePanelManager Child Component\"\n        })\n      }, _react.default.createElement(\"div\", {\n        className: cx('content-wrapper')\n      }, this.renderButton('default'), this.renderButton('tiny'), this.renderButton('small'), this.renderButton('medium'), this.renderButton('large'), this.renderButton('huge'), this.renderButton('fullscreen'), _react.default.createElement(\"br\", null), _react.default.createElement(\"p\", null, \"The child components can disclose content in the panel at various sizes.\"), _react.default.createElement(\"p\", null, \"The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.\")), _react.default.createElement(\"div\", {\n        className: cx('content-wrapper')\n      }, this.renderForm(), this.renderFormButton()));\n    }\n  }]);\n  return ContentComponent;\n}(_react.default.Component);\n\nContentComponent.contextType = _terraDisclosureManager.DisclosureManagerContext;\nContentComponent.propTypes = {\n  disclosureType: _propTypes.default.string,\n  panelBehavior: _propTypes.default.oneOf(['overlay', 'squish'])\n};\n\nvar SlidePanelManagerExample = function SlidePanelManagerExample(_ref) {\n  var behavior = _ref.behavior,\n      showAccessory = _ref.showAccessory;\n  return _react.default.createElement(\"div\", {\n    className: cx('example-wrapper')\n  }, _react.default.createElement(_terraSlidePanelManager.default, {\n    panelBehavior: behavior,\n    disclosureAccessory: showAccessory ? _react.default.createElement(\"div\", {\n      className: cx('disclosure-accessory')\n    }, \"Disclosure Accessory\") : undefined\n  }, _react.default.createElement(ContentComponent, {\n    panelBehavior: behavior,\n    disclosureType: \"panel\"\n  })));\n};\n\nSlidePanelManagerExample.propTypes = {\n  behavior: _propTypes.default.string,\n  showAccessory: _propTypes.default.bool\n};\nvar _default = SlidePanelManagerExample;\n/* eslint-disable max-classes-per-file */\n\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"example-wrapper\":\"SlidePanelManager-module__example-wrapper___U5Qq3\",\"content-wrapper\":\"SlidePanelManager-module__content-wrapper___gXd1w\",\"disclosure-accessory\":\"SlidePanelManager-module__disclosure-accessory___2cNv5\"};","export default \"/* eslint-disable max-classes-per-file */\\nimport React from 'react';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport ActionHeader from 'terra-action-header';\\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\\nimport ContentContainer from 'terra-content-container';\\nimport {\\n  availableDisclosureHeights, availableDisclosureWidths, DisclosureManagerHeaderAdapter, DisclosureManagerContext,\\n} from 'terra-disclosure-manager';\\n\\nimport SlidePanelManager from 'terra-slide-panel-manager';\\nimport styles from 'terra-slide-panel-manager/lib/terra-dev-site/doc/example/SlidePanelManager.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass DisclosureComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.checkLockState = this.checkLockState.bind(this);\\n\\n    this.state = {\\n      text: undefined,\\n    };\\n  }\\n\\n  componentDidMount() {\\n    const disclosureManager = this.context;\\n\\n    if (disclosureManager && disclosureManager.registerDismissCheck) {\\n      disclosureManager.registerDismissCheck(this.checkLockState);\\n    }\\n  }\\n\\n  checkLockState() {\\n    if (this.state.text && this.state.text.length) {\\n      return new Promise((resolve, reject) => {\\n        // eslint-disable-next-line no-restricted-globals\\n        if (!confirm(`${this.props.name} has unsaved changes that will be lost. Do you wish to continue?`)) { // eslint-disable-line no-alert\\n          reject();\\n          return;\\n        }\\n\\n        resolve();\\n      });\\n    }\\n\\n    return Promise.resolve();\\n  }\\n\\n  render() {\\n    const { name, disclosureType } = this.props;\\n    const disclosureManager = this.context;\\n\\n    return (\\n      <ContentContainer fill>\\n        <DisclosureManagerHeaderAdapter\\n          title={name}\\n          collapsibleMenuView={(\\n            <CollapsibleMenuView>\\n              <CollapsibleMenuView.Item\\n                text=\\\"Button 1\\\"\\n                key=\\\"button_1\\\"\\n                onClick={() => {\\n                  this.setState({\\n                    selectedHeaderAction: 'Button 1',\\n                  });\\n                }}\\n              />\\n              <CollapsibleMenuView.Item\\n                text=\\\"Button 2\\\"\\n                key=\\\"button_2\\\"\\n                onClick={() => {\\n                  this.setState({\\n                    selectedHeaderAction: 'Button 2',\\n                  });\\n                }}\\n              />\\n            </CollapsibleMenuView>\\n          )}\\n        />\\n        <div className={cx('content-wrapper')}>\\n          <h3>{name}</h3>\\n          <p>The disclosed component can disclose content within the same panel.</p>\\n          <p>It can also render a header (like above) that implements the various DisclosureManager control functions.</p>\\n          <button\\n            type=\\\"button\\\"\\n            onClick={() => {\\n              disclosureManager.dismiss()\\n                .catch(() => {\\n                  console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\\n                });\\n            }}\\n          >\\n          Dismiss\\n          </button>\\n          <button\\n            type=\\\"button\\\"\\n            onClick={() => {\\n              disclosureManager.disclose({\\n                preferredType: disclosureType,\\n                size: 'small',\\n                content: {\\n                  key: `Nested ${name}`,\\n                  component: <DisclosureComponent name={`Nested ${name}`} disclosureType={disclosureType} />,\\n                },\\n              });\\n            }}\\n          >\\n          Disclose Again\\n          </button>\\n          <br />\\n          <br />\\n          <p>The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.</p>\\n          <input\\n            type=\\\"text\\\"\\n            onChange={(event) => {\\n              this.setState({\\n                text: event.target.value,\\n              });\\n            }}\\n            value={this.state.text || ''}\\n          />\\n          {this.state.text && this.state.text.length ? <p>Component has unsaved changes!</p> : null}\\n          <br />\\n          <br />\\n          <p>\\n            Selected Header Action:\\n            {' '}\\n            <b>{this.state.selectedHeaderAction}</b>\\n          </p>\\n        </div>\\n      </ContentContainer>\\n    );\\n  }\\n}\\n\\nDisclosureComponent.contextType = DisclosureManagerContext;\\nDisclosureComponent.propTypes = {\\n  name: PropTypes.string,\\n  disclosureType: PropTypes.string,\\n};\\nDisclosureComponent.defaultProps = {\\n  name: 'Disclosure Component',\\n};\\n\\nconst HEIGHT_KEYS = Object.keys(availableDisclosureHeights);\\nconst WIDTH_KEYS = Object.keys(availableDisclosureWidths);\\n\\nconst generateDimensionOptions = values => (\\n  values.map((currentValue, index) => {\\n    const keyValue = index;\\n    return <option key={keyValue} value={currentValue}>{currentValue}</option>;\\n  })\\n);\\n\\nclass ContentComponent extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.renderButton = this.renderButton.bind(this);\\n    this.handleSelectChange = this.handleSelectChange.bind(this);\\n    this.getId = this.getId.bind(this);\\n\\n    this.state = { id: 'dimensions', disclosureHeight: HEIGHT_KEYS[0], disclosureWidth: WIDTH_KEYS[0] };\\n  }\\n\\n  getId(name) {\\n    return name + this.state.id;\\n  }\\n\\n  handleSelectChange(event) {\\n    this.setState({ [event.target.name]: event.target.value });\\n  }\\n\\n  renderButton(size) {\\n    const { disclosureType } = this.props;\\n    const disclosureManager = this.context;\\n\\n    return (\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          disclosureManager.disclose({\\n            preferredType: disclosureType,\\n            size,\\n            content: {\\n              key: `Content-Disclosure-${size}`,\\n              component: <DisclosureComponent name=\\\"Disclosure Component\\\" disclosureType={disclosureType} />,\\n            },\\n          });\\n        }}\\n      >\\n        {`Disclose (${size})`}\\n      </button>\\n    );\\n  }\\n\\n  renderFormButton() {\\n    const { disclosureType } = this.props;\\n    const disclosureManager = this.context;\\n\\n    const name = `Disclose (${this.state.disclosureHeight}) x (${this.state.disclosureWidth})`;\\n\\n    return (\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          disclosureManager.disclose({\\n            preferredType: disclosureType,\\n            dimensions: { height: this.state.disclosureHeight, width: this.state.disclosureWidth },\\n            content: {\\n              key: 'Content-Disclosure-Dimensions',\\n              component: <DisclosureComponent name=\\\"Disclosure Component\\\" disclosureType={disclosureType} />,\\n            },\\n          });\\n        }}\\n      >\\n        {name}\\n      </button>\\n    );\\n  }\\n\\n  renderForm() {\\n    return (\\n      <form>\\n        <label htmlFor={this.getId(`disclosureHeight${this.props.panelBehavior}`)}>Pop Content Height</label>\\n        <select id={this.getId(`disclosureHeight${this.props.panelBehavior}`)} name=\\\"disclosureHeight\\\" value={this.state.disclosureHeight} onChange={this.handleSelectChange}>\\n          {generateDimensionOptions(HEIGHT_KEYS)}\\n        </select>\\n        <br />\\n        <br />\\n        <label htmlFor={this.getId(`disclosureWidth${this.props.panelBehavior}`)}>Pop Content Width</label>\\n        <select id={this.getId(`disclosureWidth${this.props.panelBehavior}`)} name=\\\"disclosureWidth\\\" value={this.state.disclosureWidth} onChange={this.handleSelectChange}>\\n          {generateDimensionOptions(WIDTH_KEYS)}\\n        </select>\\n        <br />\\n        <br />\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <ContentContainer\\n        header={(\\n          <ActionHeader\\n            title=\\\"SlidePanelManager Child Component\\\"\\n          />\\n        )}\\n      >\\n        <div className={cx('content-wrapper')}>\\n          {this.renderButton('default')}\\n          {this.renderButton('tiny')}\\n          {this.renderButton('small')}\\n          {this.renderButton('medium')}\\n          {this.renderButton('large')}\\n          {this.renderButton('huge')}\\n          {this.renderButton('fullscreen')}\\n          <br />\\n          <p>The child components can disclose content in the panel at various sizes.</p>\\n          <p>The sizes available are limited to those of the SlidePanel. The specified size/dimensions will be mapped to the nearest available size.</p>\\n        </div>\\n        <div className={cx('content-wrapper')}>\\n          {this.renderForm()}\\n          {this.renderFormButton()}\\n        </div>\\n      </ContentContainer>\\n    );\\n  }\\n}\\n\\nContentComponent.contextType = DisclosureManagerContext;\\nContentComponent.propTypes = {\\n  disclosureType: PropTypes.string,\\n  panelBehavior: PropTypes.oneOf(['overlay', 'squish']),\\n};\\n\\nconst SlidePanelManagerExample = ({ behavior, showAccessory }) => (\\n  <div className={cx('example-wrapper')}>\\n    <SlidePanelManager\\n      panelBehavior={behavior}\\n      disclosureAccessory={showAccessory ? (\\n        <div className={cx('disclosure-accessory')}>\\n          Disclosure Accessory\\n        </div>\\n      ) : undefined}\\n    >\\n      <ContentComponent panelBehavior={behavior} disclosureType=\\\"panel\\\" />\\n    </SlidePanelManager>\\n  </div>\\n);\\n\\nSlidePanelManagerExample.propTypes = {\\n  behavior: PropTypes.string,\\n  showAccessory: PropTypes.bool,\\n};\\n\\nexport default SlidePanelManagerExample;\\n/* eslint-disable max-classes-per-file */\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _SlidePanelManager = _interopRequireDefault(require(\"!raw-loader!../../../../src/SlidePanelManager.jsx\"));\n\nvar _SlidePanelManagerExample = _interopRequireDefault(require(\"../example/SlidePanelManagerExample\"));\n\nvar _SlidePanelManagerExample2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/SlidePanelManagerExample.jsx\"));\n\n// Component Source\n// Examples\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _README.default,\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'Overlay Example',\n      example: _react.default.createElement(_SlidePanelManagerExample.default, {\n        behavior: \"overlay\"\n      }),\n      source: _SlidePanelManagerExample2.default\n    }, {\n      title: 'Squish Example',\n      example: _react.default.createElement(_SlidePanelManagerExample.default, {\n        behavior: \"squish\"\n      }),\n      source: _SlidePanelManagerExample2.default\n    }, {\n      title: 'Disclosure Accessory Example',\n      example: _react.default.createElement(_SlidePanelManagerExample.default, {\n        behavior: \"squish\",\n        showAccessory: true\n      }),\n      source: _SlidePanelManagerExample2.default\n    }],\n    propsTables: [{\n      componentSrc: _SlidePanelManager.default,\n      source: _SlidePanelManagerExample2.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SlidePanelPositions = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _SlidePanelModule = _interopRequireDefault(require(\"./SlidePanel.module.scss\"));\n\nvar cx = _bind.default.bind(_SlidePanelModule.default);\n\nvar SlidePanelPositions = {\n  START: 'start',\n  END: 'end'\n};\nexports.SlidePanelPositions = SlidePanelPositions;\nvar propTypes = {\n  /**\n   * The component to display in the main content area.\n   */\n  mainContent: _propTypes.default.node,\n\n  /**\n   * The component to display in the panel content area.\n   */\n  panelContent: _propTypes.default.node,\n\n  /**\n   * The style of panel presentation. One of `overlay`, `squish`.\n   */\n  panelBehavior: _propTypes.default.oneOf(['overlay', 'squish']),\n\n  /**\n   * The position at which the panel will be displayed. This property honors the current direction setting. One of `start`, `end`.\n   */\n  panelPosition: _propTypes.default.oneOf(['start', 'end']),\n\n  /**\n   * The size at which the panel will be displayed. One of `small`, `large`.\n   */\n  panelSize: _propTypes.default.oneOf(['small', 'large']),\n\n  /**\n   * Whether or not, when open, the panel should be displayed with the full width of the SlidePanel.\n   */\n  isFullscreen: _propTypes.default.bool,\n\n  /**\n   * Whether or not the panel should be displayed.\n   */\n  isOpen: _propTypes.default.bool,\n\n  /**\n   * Whether or not the SlidePanel should be sized relative to its parent container.\n   */\n  fill: _propTypes.default.bool\n};\nvar defaultProps = {\n  panelBehavior: 'overlay',\n  panelPosition: SlidePanelPositions.END,\n  panelSize: 'small'\n};\n\nvar SlidePanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SlidePanel, _React$Component);\n\n  function SlidePanel(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SlidePanel);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SlidePanel).call(this, props));\n    _this.setPanelNode = _this.setPanelNode.bind((0, _assertThisInitialized2.default)(_this));\n    _this.mainNode = _react.default.createRef();\n    return _this;\n  }\n\n  (0, _createClass2.default)(SlidePanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isOpen && this.props.isOpen !== prevProps.isOpen) {\n        this.panelNode.focus();\n      } else if (!this.props.isOpen && this.props.isOpen !== prevProps.isOpen) {\n        this.mainNode.current.focus();\n      }\n    }\n  }, {\n    key: \"setPanelNode\",\n    value: function setPanelNode(node) {\n      this.panelNode = node;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mainContent = _this$props.mainContent,\n          panelContent = _this$props.panelContent,\n          panelBehavior = _this$props.panelBehavior,\n          panelPosition = _this$props.panelPosition,\n          panelSize = _this$props.panelSize,\n          isFullscreen = _this$props.isFullscreen,\n          isOpen = _this$props.isOpen,\n          fill = _this$props.fill,\n          customProps = (0, _objectWithoutProperties2.default)(_this$props, [\"mainContent\", \"panelContent\", \"panelBehavior\", \"panelPosition\", \"panelSize\", \"isFullscreen\", \"isOpen\", \"fill\"]);\n      var slidePanelClassNames = cx(['slide-panel', {\n        'is-open': isOpen\n      }, {\n        'is-fullscreen': isFullscreen\n      }, {\n        fill: fill\n      }, customProps.className]);\n\n      var panelDiv = _react.default.createElement(\"div\", {\n        className: cx(['panel']),\n        tabIndex: \"-1\",\n        \"aria-hidden\": !isOpen ? 'true' : 'false',\n        ref: this.setPanelNode\n      }, panelContent);\n\n      var mainDiv = _react.default.createElement(\"div\", {\n        className: cx('main'),\n        tabIndex: \"-1\",\n        ref: this.mainNode\n      }, mainContent);\n\n      var content = panelPosition === SlidePanelPositions.START ? _react.default.createElement(_react.default.Fragment, null, panelDiv, mainDiv) : _react.default.createElement(_react.default.Fragment, null, mainDiv, panelDiv);\n      return _react.default.createElement(\"div\", (0, _extends2.default)({}, customProps, {\n        className: slidePanelClassNames,\n        \"data-slide-panel-panel-behavior\": panelBehavior,\n        \"data-slide-panel-panel-position\": panelPosition,\n        \"data-slide-panel-panel-size\": panelSize\n      }), content);\n    }\n  }]);\n  return SlidePanel;\n}(_react.default.Component);\n\nSlidePanel.propTypes = propTypes;\nSlidePanel.defaultProps = defaultProps;\nvar _default = SlidePanel;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide-panel\":\"SlidePanel-module__slide-panel___16_Ez\",\"main\":\"SlidePanel-module__main___Qtxtf\",\"panel\":\"SlidePanel-module__panel___2NV-G\",\"is-open\":\"SlidePanel-module__is-open___IAbgR\",\"is-fullscreen\":\"SlidePanel-module__is-fullscreen___29Ymh\",\"fill\":\"SlidePanel-module__fill___11BRG\"};"],"sourceRoot":""}